{"version":3,"sources":["render/getRenderedCode.js"],"names":["define","$","jsbin","code","panles","getRenderedCode","promises","reduce","prev","curr","owner","panels","focused","id","render","push","Promise","all","then","data","html","javascript","css","catch","e","language","resolve","reject","named","error","console","warn","processor","isArray","cm","editor","updateLinting","hintingDone","err","res","errors","line","ch","i","length","from","CodeMirror","Pos","to","message","msg","severity","formatErrors","stack","coder"],"mappings":";;;;;;;AAAAA,QACE,iBACA,WACC,WACD,qBACA,SAAUC,EAAGC,EAAOC,EAAKC,GA4BzB,IAAIC,EAAkB,WACpB,cAMoB,EAIpB,IAAIC,GAAY,OAAQ,aAAc,OAAOC,OAAO,SAAUC,EAAMC,GAKlE,QAJKP,EAAMQ,SAAWC,OAAOC,SAAWH,IAASE,OAAOC,QAAQC,MAC9DR,EAAgBI,GAAQJ,EAAgBS,OAAOL,IAEjDD,EAAKO,KAAKV,EAAgBI,IACnBD,OAGT,OAAOQ,QAAQC,IAAIX,GAAUY,KAAK,SAAUC,GAM1C,OAJEC,KAAMD,EAAK,GACXE,WAAYF,EAAK,GACjBG,IAAKH,EAAK,MAGXI,MAAM,SAAUC,OAuCrB,OAlCAnB,EAAgBS,OAAS,SAAiBW,GACxC,OAAO,IAAIT,QAAQ,SAAUU,EAASC,GACpChB,OAAOiB,MAAMH,GAAUX,SAASI,KAAKQ,EAAS,SAAUG,GAMtD,GALAC,QAAQC,KAAKpB,OAAOiB,MAAMH,GAAUO,UAAUnB,GAAK,iCAC9CgB,IACHA,MAGE5B,EAAEgC,QAAQJ,GAAQ,CAEpB,IAAIK,EAAKvB,OAAOiB,MAAMH,GAAUU,OAGhC,QAAgC,IAArBD,EAAGE,cAA+B,CAC3CC,YAAYH,GACZ,IAAII,EA/Dd,SAAsBC,GAIpB,IAHA,IAAIC,KACAC,EAAO,EACPC,EAAK,EACAC,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAC9BF,EAAOF,EAAII,GAAGF,MAAQ,EACtBC,EAAKH,EAAII,GAAGD,IAAM,EAClBF,EAAOzB,MACL8B,KAAMC,WAAWC,IAAIN,EAAMC,GAC3BM,GAAIF,WAAWC,IAAIN,EAAMC,GACzBO,QAASV,EAAII,GAAGO,IAChBC,SAAU,UAGd,OAAOX,EAiDWY,CAAavB,GACvBK,EAAGE,cAAcE,QAGjBR,QAAQC,KAAKF,QAENA,EAAMoB,QACfnB,QAAQC,KAAKF,EAAMoB,QAASpB,EAAMwB,OAElCvB,QAAQC,KAAKF,GAGfF,EAAOE,QAONyB,MAAMxC,OAAOT,gBAAkBA","file":"../../render/getRenderedCode.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"../jsbin\",\r\n   \"../coder\",\r\n  \"../editors/panles\"\r\n],function ($, jsbin, code,panles) {\r\n  /*globals $, jsbin, editors,  loopProtect, documentTitle, CodeMirror, hintingDone*/\r\n\r\n  // moved from render/render.js\r\n\r\n  // quasi polyfill\r\n  //if (typeof window.Promise === 'undefined') {\r\n  //  window.Promise = RSVP.Promise;\r\n  //}\r\n\r\n  var renderCodeWorking = false;\r\n  function formatErrors(res) {\r\n    var errors = [];\r\n    var line = 0;\r\n    var ch = 0;\r\n    for (var i = 0; i < res.length; i++) {\r\n      line = res[i].line || 0;\r\n      ch = res[i].ch || 0;\r\n      errors.push({\r\n        from: CodeMirror.Pos(line, ch),\r\n        to: CodeMirror.Pos(line, ch),\r\n        message: res[i].msg,\r\n        severity: 'error',\r\n      });\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  var getRenderedCode = function () {\r\n    'use strict';\r\n\r\n    if (renderCodeWorking) {\r\n      // cancel existing jobs, and replace with this job\r\n    }\r\n\r\n    renderCodeWorking = true;\r\n\r\n    // this allows us to make use of a promise's result instead of recompiling\r\n    // the language each time\r\n    var promises = ['html', 'javascript', 'css'].reduce(function (prev, curr) {\r\n      if (!jsbin.owner() || panels.focused && curr === panels.focused.id) {\r\n        getRenderedCode[curr] = getRenderedCode.render(curr);\r\n      }\r\n      prev.push(getRenderedCode[curr]);\r\n      return prev;\r\n    }, []);\r\n\r\n    return Promise.all(promises).then(function (data) {\r\n      var res = {\r\n        html: data[0],\r\n        javascript: data[1],\r\n        css: data[2],\r\n      };\r\n      return res;\r\n    }).catch(function (e) {\r\n      // swallow\r\n    });\r\n  };\r\n\r\n  getRenderedCode.render = function render (language) {\r\n    return new Promise(function (resolve, reject) {\r\n      panels.named[language].render().then(resolve, function (error) {\r\n        console.warn(panels.named[language].processor.id + ' processor compilation failed');\r\n        if (!error) {\r\n          error = {};\r\n        }\r\n\r\n        if ($.isArray(error)) { // then this is for our hinter\r\n          // console.log(data.errors);\r\n          var cm = panels.named[language].editor;\r\n\r\n          // if we have the error reporting function (called updateLinting)\r\n          if (typeof cm.updateLinting !== 'undefined') {\r\n            hintingDone(cm);\r\n            var err = formatErrors(error);\r\n            cm.updateLinting(err);\r\n          } else {\r\n            // otherwise dump to the console\r\n            console.warn(error);\r\n          }\r\n        } else if (error.message) {\r\n          console.warn(error.message, error.stack);\r\n        } else {\r\n          console.warn(error);\r\n        }\r\n\r\n        reject(error);\r\n      });\r\n    });\r\n  };\r\n\r\n\r\n\r\n  return coder.render.getRenderedCode = getRenderedCode;\r\n\r\n});"]}