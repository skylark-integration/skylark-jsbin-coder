{"version":3,"sources":["editors/panels.js"],"names":["define","$","store","processors","renderer","jsbin","Panel","panels","stringAsPanelsToOpen","query","validPanels","split","reduce","toopen","key","indexOf","push","getVisible","this","named","visible","panel","save","embed","state","left","width","$window","i","length","$el","css","parseFloat","name","sessionStorage","setItem","JSON","stringify","restore","location","window","search","substring","hash","parse","getItem","hasContent","javascript","getCode","html","init","panelURLValue","openWithSameDimensions","focused","history","replaceState","pathname","origin","getURL","qs","obj","regexp","len","kstr","vstr","k","v","x","replace","idx","substr","decodeURIComponent","e","hasOwnProperty","isArray","getQuery","Object","keys","js","live","undefined","mobile","settings","saveOnExit","editor","setCode","show","todo","deferredInsert","event","data","code","parts","panelId","ready","splice","$document","unbind","bind","distribute","$body","addClass","savecontent","getHighlightLines","lines","highlightLines","string","toUpperCase","join","focus","removeClass","filter","id","alt","map","p","updateQuery","throttle","owner","ajax","url","withRevision","type","success","userResizeable","hasClass","height","innerW","innerH","outerHeight","right","top","nestedPanels","bottom","splitter","trigger","find","each","setTimeout","hide","hideAll","fromShow","prototype","panelInit","label","getValue","blank","forEach","line","trim","setCursor","ch","indentLine","renderLivePreview","console","render","showAlerts","allEditors","fn","editorsReady","setInterval","resizeTimer","match","RegExp","altLibraries","altRun","on","clearInterval","resize","clearTimeout","$panelButtons","_set","getAttribute","$label","closest","originalLabel","text","click","$panelButton","preventDefault","target","labelData","reset","set","then","source","value","$this","processorName","callback","getRenderedCode","promises","prev","curr","Promise","all","catch","language","resolve","reject","error","warn","processor","cm","updateLinting","hintingDone","err","res","errors","from","to","message","msg","severity","formatErrors","stack","requested","postMessage","saveChecksum","revision","checksum","hasBody","codes","includejs","visiblePanels","outputPanelOpen","consolePanelOpen","options","injectCSS","debug","includeJsInRealtime","coder","editors"],"mappings":"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","file":"../../editors/panels.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"skylark-jsbin-base/storage\",\r\n  \"skylark-jsbin-processors\",\r\n  \"skylark-jsbin-renderer\",  \r\n  \"../jsbin\",\r\n   \"./panel\"\r\n],function ($,store,processors,renderer,jsbin,Panel) {\r\n    'use strict';\r\n\r\n  var panels = {};\r\n\r\n  panels.getVisible = function () {\r\n    var panels = this.named,  // this.panels => this.named\r\n        visible = [];\r\n    for (var panel in panels) {\r\n      if (panels[panel].visible) visible.push(panels[panel]);\r\n    }\r\n    return visible;\r\n  };\r\n\r\n  panels.save = function () {\r\n    // don't save panel state if we're in embed mode\r\n    if (jsbin.embed) {\r\n      return;\r\n    }\r\n\r\n    var visible = this.getVisible(),\r\n        state = {},\r\n        panel,\r\n        left = '',\r\n        width = jsbin.$window.width();\r\n\r\n    for (var i = 0; i < visible.length; i++) {\r\n      panel = visible[i];\r\n      left = panel.$el.css('left');\r\n      if (left.indexOf('%') === -1) {\r\n        // convert the pixel to relative - this is because jQuery pulls\r\n        // % for Webkit based, but px for Firefox & Opera. Cover our bases\r\n        left = (parseFloat(left)  / width * 100) + '%';\r\n      }\r\n      state[panel.name] = left;\r\n    }\r\n\r\n    store.sessionStorage.setItem('jsbin.panels', JSON.stringify(state));\r\n  };\r\n\r\n  function getQuery(qs) {\r\n    /*globals $*/\r\n    var sep = '&';\r\n    var eq = '=';\r\n    var obj = {};\r\n\r\n    var regexp = /\\+/g;\r\n    qs = qs.split(sep);\r\n\r\n    var maxKeys = 1000;\r\n\r\n    var len = qs.length;\r\n    // maxKeys <= 0 means that we should not limit keys count\r\n    if (maxKeys > 0 && len > maxKeys) {\r\n      len = maxKeys;\r\n    }\r\n\r\n    for (var i = 0; i < len; ++i) {\r\n      var x = qs[i].replace(regexp, '%20'),\r\n          idx = x.indexOf(eq),\r\n          kstr, vstr, k, v;\r\n\r\n      if (idx >= 0) {\r\n        kstr = x.substr(0, idx);\r\n        vstr = x.substr(idx + 1);\r\n      } else {\r\n        kstr = x;\r\n        vstr = '';\r\n      }\r\n\r\n      try {\r\n        k = decodeURIComponent(kstr);\r\n        v = decodeURIComponent(vstr);\r\n      } catch (e) {\r\n        k = kstr;\r\n        v = vstr;\r\n      }\r\n\r\n      if (!(window.hasOwnProperty ? window.hasOwnProperty(obj, k) : obj.hasOwnProperty(k))) {\r\n        obj[k] = v;\r\n      } else if ($.isArray(obj[k])) {\r\n        obj[k].push(v);\r\n      } else {\r\n        obj[k] = [obj[k], v];\r\n      }\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  function stringAsPanelsToOpen(query) {\r\n    var validPanels = ['live', 'javascript', 'html', 'css', 'console'];\r\n\r\n    return query.split(',').reduce(function (toopen, key) {\r\n      if (key === 'js') {\r\n        key = 'javascript';\r\n      }\r\n\r\n      if (key === 'output') {\r\n        key = 'live';\r\n      }\r\n\r\n      if (validPanels.indexOf(key) !== -1) {\r\n        toopen.push(key);\r\n      }\r\n\r\n      return toopen;\r\n    }, []);\r\n  }\r\n\r\n  panels.restore = function () {\r\n    'use strict';\r\n    /*globals jsbin, editors, $window, $document*/\r\n    // if there are panel names on the hash (v2 of jsbin) or in the query (v3)\r\n    // then restore those specific panels and evenly distribute them.\r\n    var open = [],\r\n        defaultPanels = ['html', 'live'], // sigh, live == output :(\r\n        location = window.location,\r\n        search = location.search.substring(1),\r\n        hash = location.hash.substring(1),\r\n        toopen = [],\r\n        state = jsbin.embed ? null : JSON.parse(store.sessionStorage.getItem('jsbin.panels') || 'null'),\r\n        hasContent = { javascript: panels.named.javascript.getCode().length,\r\n          css: panels.named.css.getCode().length,\r\n          html: panels.named.html.getCode().length\r\n        },\r\n        name = '',\r\n        i = 0,\r\n        panel = null,\r\n        init = [],\r\n        panelURLValue = '',\r\n        openWithSameDimensions = false,\r\n        width = jsbin.$window.width(),\r\n        deferredCodeInsert = '',\r\n        focused = !!store.sessionStorage.getItem('panel'),\r\n        validPanels = 'live javascript html css console'.split(' '),\r\n        cachedHash = '';\r\n\r\n    if (history.replaceState && (location.pathname.indexOf('/edit') !== -1) || ((location.origin + location.pathname) === jsbin.getURL() + '/')) {\r\n      // history.replaceState(null, '', jsbin.getURL() + (jsbin.getURL() === jsbin.root ? '' : '/edit') + (hash ? '#' + hash : ''));\r\n    }\r\n\r\n    if (search || hash) {\r\n      var query = (search || hash);\r\n\r\n      // assume the query is: html=xyz\r\n      if (query.indexOf('&') !== -1) {\r\n        query = getQuery(search || hash);\r\n        toopen = Object.keys(query).reduce(function (toopen, key) {\r\n          if (key.indexOf(',') !== -1 && query[key] === '') {\r\n            toopen = stringAsPanelsToOpen(key);\r\n            return toopen;\r\n          }\r\n\r\n          if (key === 'js') {\r\n            query.javascript = query.js;\r\n            key = 'javascript';\r\n          }\r\n\r\n          if (key === 'output') {\r\n            query.live = query.live;\r\n            key = 'live';\r\n          }\r\n\r\n          if (query[key] === undefined) {\r\n            query[key] = '';\r\n          }\r\n\r\n          if (validPanels.indexOf(key) !== -1) {\r\n            toopen.push(key + '=' + query[key]);\r\n          }\r\n\r\n          return toopen;\r\n        }, []);\r\n      } else {\r\n        toopen = stringAsPanelsToOpen(query);\r\n      }\r\n    }\r\n\r\n    if (toopen.length === 0) {\r\n      if (state !== null) {\r\n        toopen = Object.keys(state);\r\n      }\r\n      else {\r\n        // load from personal settings\r\n        toopen = jsbin.mobile ? [jsbin.settings.panels[0]] : jsbin.settings.panels;\r\n      }\r\n    }\r\n\r\n    if (toopen.length === 0) {\r\n      if (hasContent.javascript) {toopen.push('javascript');}\r\n      if (hasContent.html) {toopen.push('html');}\r\n      if (hasContent.css) {toopen.push('css');}\r\n      toopen.push('live');\r\n    }\r\n\r\n    panels.saveOnExit = true;\r\n\r\n    /* Boot code */\r\n    // then allow them to view specific panels based on comma separated hash fragment/query\r\n    i = 0;\r\n\r\n    if (toopen.length === 0) {\r\n      toopen = defaultPanels;\r\n    }\r\n\r\n    if (toopen.length) {\r\n      for (name in state) {\r\n        if (toopen.indexOf(name) !== -1) {\r\n          i++;\r\n        }\r\n      }\r\n\r\n      if (i === toopen.length) {\r\n        openWithSameDimensions = true;\r\n      }\r\n\r\n      for (i = 0; i < toopen.length; i++) {\r\n        panelURLValue = null;\r\n        name = toopen[i];\r\n\r\n        // if name contains an `=` it means we also need to set that particular panel to that code\r\n        if (name.indexOf('=') !== -1) {\r\n          panelURLValue = name.substring(name.indexOf('=') + 1);\r\n          name = name.substring(0, name.indexOf('='));\r\n        }\r\n\r\n        if (panels.named[name]) { // panels.panels => panels.named\r\n          panel = panels.named[name]; // panels.panels => panels.named\r\n          // console.log(name, 'width', state[name], width * parseFloat(state[name]) / 100);\r\n          if (panel.editor && panelURLValue !== null) {\r\n            panel.setCode(decodeURIComponent(panelURLValue));\r\n          }\r\n\r\n          if (openWithSameDimensions && toopen.length > 1) {\r\n            panel.show(width * parseFloat(state[name]) / 100);\r\n          } else {\r\n            panel.show();\r\n          }\r\n          init.push(panel);\r\n        } else if (name && panelURLValue !== null) { // TODO support any varible insertion\r\n          (function (name, panelURLValue) {\r\n            var todo = ['html', 'javascript', 'css'];\r\n\r\n            var deferredInsert = function (event, data) {\r\n              var code, parts, panel = panels.named[data.panelId] || {}; // panels.panels => panels.named\r\n\r\n              if (data.panelId && panel.editor && panel.ready === true) {\r\n                todo.splice(todo.indexOf(data.panelId), 1);\r\n                try {\r\n                  code = panel.getCode();\r\n                } catch (e) {\r\n                  // this really shouldn't happen\r\n                  // console.error(e);\r\n                }\r\n                if (code.indexOf('%' + name + '%') !== -1) {\r\n                  parts = code.split('%' + name + '%');\r\n                  code = parts[0] + decodeURIComponent(panelURLValue) + parts[1];\r\n                  panel.setCode(code);\r\n                  jsbin.$document.unbind('codeChange', deferredInsert);\r\n                }\r\n              }\r\n\r\n              if (todo.length === 0) {\r\n                jsbin.$document.unbind('codeChange', deferredInsert);\r\n              }\r\n            };\r\n\r\n            jsbin.$document.bind('codeChange', deferredInsert);\r\n          }(name, panelURLValue));\r\n        }\r\n      }\r\n\r\n      // support the old jsbin v1 links directly to the preview\r\n      if (toopen.length === 1 && toopen[0] === 'preview') {\r\n        panels.named.live.show(); // panels.panels => panels.named\r\n      }\r\n\r\n      if (!openWithSameDimensions) {this.distribute();}\r\n    }\r\n\r\n    // now restore any data from sessionStorage\r\n    // TODO add default templates somewhere\r\n    // var template = {};\r\n    // for (name in this.panels) {\r\n    //   panel = this.panels[name];\r\n    //   if (panel.editor) {\r\n    //     // panel.setCode(store.sessionStorage.getItem('jsbin.content.' + name) || template[name]);\r\n    //   }\r\n    // }\r\n\r\n    for (i = 0; i < init.length; i++) {\r\n      init[i].init();\r\n    }\r\n\r\n    var visible = panels.getVisible();\r\n    if (visible.length) {\r\n      jsbin.$body.addClass('panelsVisible');\r\n      if (!focused) {\r\n        visible[0].show();\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  panels.savecontent = function () {\r\n    // loop through each panel saving it's content to sessionStorage\r\n    var name, panel;\r\n    for (name in this.named) {  // this.panels => this.named\r\n      panel = this.named[name]; // this.panels => this.named\r\n      if (panel.editor) store.sessionStorage.setItem('jsbin.content.' + name, panel.getCode());\r\n    }\r\n  };\r\n\r\n  panels.getHighlightLines = function () {\r\n    'use strict';\r\n    var hash = [];\r\n    var lines = '';\r\n    var panel;\r\n    for (name in panels.named) { // panels.panels => panels.named\r\n      panel = panels.named[name]; // panels.panels => panels.named\r\n      if (panel.editor) {\r\n        lines = panel.editor.highlightLines().string;\r\n        if (lines) {\r\n          hash.push(name.substr(0, 1).toUpperCase() + ':L' + lines);\r\n        }\r\n      }\r\n    }\r\n    return hash.join(',');\r\n  };\r\n\r\n  panels.focus = function (panel) {\r\n    this.focused = panel;\r\n    if (panel) {\r\n      $('.panel').removeClass('focus').filter('.' + panel.id).addClass('focus');\r\n    }\r\n  }\r\n\r\n  panels.getQuery = function () {\r\n    var alt = {\r\n      javascript: 'js',\r\n      live: 'output'\r\n    };\r\n\r\n    var visible = panels.getVisible();\r\n\r\n    return visible.map(function (p) {\r\n      return alt[p.id] || p.id;\r\n    }).join(',');\r\n  }\r\n\r\n  panels.updateQuery = jsbin.throttle(function updateQuery() {\r\n    var query = panels.getQuery();\r\n\r\n    if (jsbin.state.code && jsbin.state.owner) {\r\n      $.ajax({\r\n        url: jsbin.getURL({ withRevision: true }) + '/settings',\r\n        type: 'PUT',\r\n        data: { panels: visible.map(function (p) { return p.id; }) },\r\n        success: function () {}\r\n      });\r\n    }\r\n\r\n    if (history.replaceState) {\r\n      history.replaceState(null, null, '?' + query);\r\n    }\r\n  }, 100);\r\n\r\n  var userResizeable = !$('html').hasClass('layout');\r\n\r\n  if (!userResizeable) {\r\n    $('#source').removeClass('stretch');\r\n  }\r\n\r\n  // evenly distribute the width of all the visible panels\r\n  panels.distribute = function () {\r\n    if (!userResizeable) {\r\n      return;\r\n    }\r\n\r\n    var visible = $('#source .panelwrapper:visible'),\r\n        width = 100,\r\n        height = 0,\r\n        innerW = jsbin.$window.width() - (visible.length - 1), // to compensate for border-left\r\n        innerH = $('#source').outerHeight(),\r\n        left = 0,\r\n        right = 0,\r\n        top = 0,\r\n        panel,\r\n        nestedPanels = [];\r\n\r\n    if (visible.length) {\r\n      jsbin.$body.addClass('panelsVisible');\r\n\r\n      // visible = visible.sort(function (a, b) {\r\n      //   return a.order < b.order ? -1 : 1;\r\n      // });\r\n\r\n      width = 100 / visible.length;\r\n      for (var i = 0; i < visible.length; i++) {\r\n        panel = $.data(visible[i], 'panel');\r\n        right = 100 - (width * (i+1));\r\n        panel.$el.css({ top: 0, bottom: 0, left: left + '%', right: right + '%' });\r\n        panel.splitter.trigger('init', innerW * left/100);\r\n        panel.splitter[i == 0 ? 'hide' : 'show']();\r\n        left += width;\r\n\r\n        nestedPanels = $(visible[i]).find('.panel');\r\n        if (nestedPanels.length > 1) {\r\n          top = 0;\r\n          nestedPanels = nestedPanels.filter(':visible');\r\n          height = 100 / nestedPanels.length;\r\n          nestedPanels.each(function (i) {\r\n            bottom = 100 - (height * (i+1));\r\n            var panel = panels.named[$.data(this, 'name')];  // jsbin.panels.panels => panels.named\r\n            // $(this).css({ top: top + '%', bottom: bottom + '%' });\r\n            $(this).css('top', top + '%');\r\n            $(this).css('bottom', bottom + '%' );\r\n            if (panel.splitter.hasClass('vertical')) {\r\n              panel.splitter.trigger('init', innerH * top/100);\r\n              panel.splitter[i == 0 ? 'hide' : 'show']();\r\n            }\r\n            top += height;\r\n          });\r\n        }\r\n      }\r\n    } else if (!jsbin.embed) {\r\n      $('#history').show();\r\n      setTimeout(function () {\r\n        jsbin.$body.removeClass('panelsVisible');\r\n      }, 100); // 100 is on purpose to add to the effect of the reveal\r\n    }\r\n  };\r\n\r\n  panels.show = function (panelId) {\r\n    this.named[panelId].show();  // this.panels => this.named\r\n    if (this.named[panelId].editor) { // this.panels => this.named\r\n      this.named[panelId].editor.focus(); // this.panels => this.named\r\n    }\r\n    this.named[panelId].focus(); // this.panels => this.named\r\n  };\r\n\r\n  panels.hide = function (panelId) {\r\n    var $history = $('#history'); // TODO shouldn't have to keep hitting this\r\n    var panels = this.named; // this.panels => this.named\r\n    if (panels[panelId].visible) {\r\n      panels[panelId].hide();\r\n    }\r\n\r\n    var visible = panels.getVisible();\r\n    if (visible.length) {\r\n      panels.focused = visible[0];\r\n      if (panels.focused.editor) {\r\n        panels.focused.editor.focus();\r\n      } else {\r\n        panels.focused.$el.focus();\r\n      }\r\n      panels.focused.focus();\r\n    }\r\n\r\n    /*\r\n    } else if ($history.length && !$body.hasClass('panelsVisible')) {\r\n      $body.toggleClass('dave', $history.is(':visible'));\r\n      $history.toggle(100);\r\n    } else if ($history.length === 0) {\r\n      // TODO load up the history\r\n    }\r\n    */\r\n  };\r\n\r\n  panels.hideAll = function (fromShow) {\r\n    var visible = panels.getVisible(),\r\n        i = visible.length;\r\n    while (i--) {\r\n      visible[i].hide(fromShow);\r\n    }\r\n  };\r\n\r\n  // dirty, but simple\r\n  Panel.prototype.distribute = function () {\r\n    panels.distribute();\r\n  };\r\n\r\n  var ignoreDuringLive = /^\\s*(while|do|for)[\\s*|$]/;\r\n\r\n\r\n  var panelInit = {\r\n    html: function () {\r\n      var init = function () {\r\n        // set cursor position on first blank line\r\n        // 1. read all the inital lines\r\n        var lines = this.editor.getValue().split('\\n'),\r\n            blank = -1;\r\n        lines.forEach(function (line, i) {\r\n          if (blank === -1 && line.trim().length === 0) {\r\n            blank = i;\r\n            //exit\r\n          }\r\n        });\r\n\r\n        if (blank !== -1) {\r\n          this.editor.setCursor({ line: blank, ch: 2 });\r\n          if (lines[blank].length === 0) {\r\n            this.editor.indentLine(blank, 'add');\r\n          }\r\n        }\r\n      };\r\n\r\n      return new Panel('html', { editor: true, label: 'HTML', init: init });\r\n    },\r\n    css: function () {\r\n      return new Panel('css', { editor: true, label: 'CSS' });\r\n    },\r\n    javascript: function () {\r\n      return new Panel('javascript', { editor: true, label: 'JavaScript' });\r\n    },\r\n    console: function () {\r\n      // hide and show callbacks registered in console.js\r\n      return new Panel('console', { label: 'Console' });\r\n    },\r\n    live: function () {\r\n      function show() {\r\n        // var panel = this;\r\n        if (panels.ready) {\r\n          renderLivePreview();\r\n        }\r\n      }\r\n\r\n      function hide() {\r\n        // detroy the iframe if we hide the panel\r\n        // note: $live is defined in live.js\r\n        // Commented out so that the live iframe is never destroyed\r\n        if (panels.named.console.visible === false) { // panels.panels => panels.named\r\n          // $live.find('iframe').remove();\r\n        }\r\n      }\r\n\r\n      return new Panel('live', { label: 'Output', show: show, hide: hide });\r\n    }\r\n  };\r\n\r\n  var editors = panels.named = {};  // panels.panels => panels.named\r\n\r\n  // show all panels (change the order to control the panel order)\r\n  panels.named.html = panelInit.html();\r\n  panels.named.css = panelInit.css();\r\n  panels.named.javascript = panelInit.javascript();\r\n  panels.named.console = panelInit.console();\r\n  ///upgradeConsolePanel(editors.console);\r\n  panels.named.live = panelInit.live();\r\n\r\n  panels.named.live.settings.render = function (showAlerts) {\r\n    if (panels.ready) {\r\n      renderLivePreview(showAlerts);\r\n    }\r\n  };\r\n\r\n  panels.allEditors = function (fn) {\r\n    var panelId, panel;\r\n    for (panelId in panels.named) {  // panels.panels => panels.named\r\n      panel = panels.named[panelId]; // panels.panels => panels.named\r\n      if (panel.editor) fn(panel);\r\n    }\r\n  };\r\n\r\n  setTimeout(function () {\r\n    panels.restore();\r\n  }, 10);\r\n  panels.focus(panels.getVisible()[0] || null);\r\n\r\n  var editorsReady = setInterval(function () {\r\n    var ready = true,\r\n        resizeTimer = null,\r\n        panel,\r\n        panelId,\r\n        hash = window.location.hash.substring(1);\r\n\r\n\r\n    for (panelId in panels.named) {  // panels.panels => panels.named\r\n      panel = panels.named[panelId]; // panels.panels => panels.named\r\n      if (panel.visible && !panel.ready) {\r\n        ready = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    panels.ready = ready;\r\n\r\n    if (ready) {\r\n      panels.allEditors(function (panel) {\r\n        var key = panel.id.substr(0, 1).toUpperCase() + ':L';\r\n        if (hash.indexOf(key) !== -1) {\r\n          var lines = hash.match(new RegExp(key + '(\\\\d+(?:-\\\\d+)?)'));\r\n          if (lines !== null) {\r\n            panel.editor.highlightLines(lines[1]);\r\n          }\r\n        }\r\n      });\r\n\r\n      var altLibraries = $('li.add-library');\r\n      var altRun = $('li.run-with-js');\r\n      panels.named.live.on('hide', function () {\r\n        altLibraries.show();\r\n        altRun.hide();\r\n      });\r\n\r\n      panels.named.live.on('show', function () {\r\n        altLibraries.hide();\r\n        altRun.show();\r\n      });\r\n\r\n      if (panels.named.live.visible) { // panels.panels => panels.named\r\n        panels.named.live.trigger('show');\r\n      } else {\r\n        panels.named.live.trigger('hide');\r\n      }\r\n\r\n      clearInterval(editorsReady);\r\n\r\n      // if the console is visible, it'll handle rendering of the output and console\r\n      if (panels.named.console.visible) { // panels.panels => panels.named\r\n        panels.named.console.render();\r\n      } else {\r\n        // otherwise, force a render\r\n        renderLivePreview();\r\n      }\r\n\r\n\r\n      if (!jsbin.mobile) {\r\n        $(window).resize(function () {\r\n          clearTimeout(resizeTimer);\r\n          resizeTimer = setTimeout(function () {\r\n            jsbin.$document.trigger('sizeeditors');\r\n          }, 100);\r\n        });\r\n      }\r\n\r\n      jsbin.$document.trigger('sizeeditors');\r\n      jsbin.$document.trigger('jsbinReady');\r\n    }\r\n  }, 100);\r\n\r\n\r\n\r\n  setTimeout(function () {\r\n    panels.restore();\r\n  }, 10);\r\n  panels.focus(panels.getVisible()[0] || null);\r\n\r\n  // moved from processors/processor.js\r\n  var render = function() {\r\n    if (panels.ready) {\r\n      panels.named.console.render();\r\n    }\r\n  };\r\n\r\n  var $panelButtons = $('#panels');\r\n\r\n  var $processorSelectors = $('div.processorSelector').each(function () {\r\n    var panelId = this.getAttribute('data-type'),\r\n        $el = $(this),\r\n        $label = $el.closest('.label').find('strong a'),\r\n        originalLabel = $label.text();\r\n\r\n    $el.find('a').click(function (e) {\r\n      var panel = panels.named[panelId];\r\n      var $panelButton = $panelButtons.find('a[href$=\"' + panelId + '\"]');\r\n\r\n      e.preventDefault();\r\n      var target = this.hash.substring(1),\r\n          label = $(this).text(),\r\n          labelData = $(this).data('label');\r\n      if (target !== 'convert') {\r\n        $panelButton.html(labelData || label);\r\n        $label.html('<span>' + label + '</span>');\r\n        if (target === panelId) {\r\n          processors.reset(panelId);\r\n          render();\r\n        } else {\r\n          processors.set(panelId, target, render);\r\n        }\r\n      } else {\r\n        $label.text(originalLabel);\r\n        $panelButton.html(originalLabel);\r\n        panel.render().then(function (source) {\r\n          processors.reset(panelId);\r\n          panel.setCode(source);\r\n        });\r\n      }\r\n    }).bind('select', function (event, value) {\r\n      if (value === this.hash.substring(1)) {\r\n        var $panelButton = $panelButtons.find('a[href$=\"' + panelId + '\"]');\r\n        var $this = $(this);\r\n        $label.html('<span>' + $this.text() + '</span>');\r\n        $panelButton.html($this.data('label') || $this.text());\r\n      }\r\n    });\r\n  });\r\n\r\n  var _set = processors.set;\r\n  processors.set = function (panelId, processorName, callback) {\r\n    var panel;\r\n\r\n    // panelId can be id or instance of a panel.\r\n    // this is kinda nasty, but it allows me to set panel processors during boot\r\n    if (panelId instanceof Panel) {\r\n      panel = panelId;\r\n    } else {\r\n      panel = panels.named[panelId];\r\n    }\r\n\r\n    _set(panel,processorName,callback);\r\n\r\n  };\r\n\r\n\r\n  processors.reset = function (panelId) {\r\n    processors.set(panelId);\r\n  };\r\n\r\n\r\n\r\n  // moved from render/render.js\r\n  var renderCodeWorking = false;\r\n  function formatErrors(res) {\r\n    var errors = [];\r\n    var line = 0;\r\n    var ch = 0;\r\n    for (var i = 0; i < res.length; i++) {\r\n      line = res[i].line || 0;\r\n      ch = res[i].ch || 0;\r\n      errors.push({\r\n        from: {line, ch},\r\n        to: {line, ch},\r\n        message: res[i].msg,\r\n        severity: 'error',\r\n      });\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  var getRenderedCode = panels.getRenderedCode =  function () {\r\n    'use strict';\r\n\r\n    if (renderCodeWorking) {\r\n      // cancel existing jobs, and replace with this job\r\n    }\r\n\r\n    renderCodeWorking = true;\r\n\r\n    // this allows us to make use of a promise's result instead of recompiling\r\n    // the language each time\r\n    var promises = ['html', 'javascript', 'css'].reduce(function (prev, curr) {\r\n      if (!jsbin.owner() || panels.focused && curr === panels.focused.id) {\r\n        getRenderedCode[curr] = getRenderedCode.render(curr);\r\n      }\r\n      prev.push(getRenderedCode[curr]);\r\n      return prev;\r\n    }, []);\r\n\r\n    return Promise.all(promises).then(function (data) {\r\n      var res = {\r\n        html: data[0],\r\n        javascript: data[1],\r\n        css: data[2],\r\n      };\r\n      return res;\r\n    }).catch(function (e) {\r\n      // swallow\r\n    });\r\n  };\r\n\r\n  getRenderedCode.render = function render (language) {\r\n    return new Promise(function (resolve, reject) {\r\n      panels.named[language].render().then(resolve, function (error) {\r\n        console.warn(panels.named[language].processor.id + ' processor compilation failed');\r\n        if (!error) {\r\n          error = {};\r\n        }\r\n\r\n        if ($.isArray(error)) { // then this is for our hinter\r\n          // console.log(data.errors);\r\n          var cm = panels.named[language].editor;\r\n\r\n          // if we have the error reporting function (called updateLinting)\r\n          if (typeof cm.updateLinting !== 'undefined') {\r\n            hintingDone(cm);\r\n            var err = formatErrors(error);\r\n            cm.updateLinting(err);\r\n          } else {\r\n            // otherwise dump to the console\r\n            console.warn(error);\r\n          }\r\n        } else if (error.message) {\r\n          console.warn(error.message, error.stack);\r\n        } else {\r\n          console.warn(error);\r\n        }\r\n\r\n        reject(error);\r\n      });\r\n    });\r\n  };\r\n\r\n\r\n function sendReload() {\r\n    if (jsbin.saveChecksum) {\r\n      $.ajax({\r\n        url: jsbin.getURL() + '/reload',\r\n        data: {\r\n          code: jsbin.state.code,\r\n          revision: jsbin.state.revision,\r\n          checksum: jsbin.saveChecksum\r\n        },\r\n        type: 'post'\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /** ============================================================================\r\n   * Live rendering.\r\n   *\r\n   * Comes in two tasty flavours. Basic mode, which is essentially an IE7\r\n   * fallback. Take a look at https://github.com/jsbin/jsbin/issues/651 for more.\r\n   * It uses the iframe's name and JS Bin's event-stream support to keep the\r\n   * page up-to-date.\r\n   *\r\n   * The second mode uses postMessage to inform the runner of changes to code,\r\n   * config and anything that affects rendering, and also listens for messages\r\n   * coming back to update the JS Bin UI.\r\n   * ========================================================================== */\r\n\r\n  /**\r\n   * Render live preview.\r\n   * Create the runner iframe, and if postMe wait until the iframe is loaded to\r\n   * start postMessaging the runner.\r\n   */\r\n\r\n  // The big daddy that handles postmessaging the runner.\r\n  var renderLivePreview = panels.renderLivePreview = function (requested) {\r\n    // No postMessage? Don't render – the event-stream will handle it.\r\n    if (!window.postMessage) { return; }\r\n\r\n    // Inform other pages event streaming render to reload\r\n    if (requested) {\r\n      sendReload();\r\n      jsbin.state.hasBody = false;\r\n    }\r\n    getRenderedCode().then(function (codes) { // modified by lwf\r\n      var includeJsInRealtime = jsbin.settings.includejs;\r\n\r\n      // Tell the iframe to reload\r\n      var visiblePanels = panels.getVisible();\r\n      var outputPanelOpen = visiblePanels.indexOf(panels.named.live) > -1;\r\n      var consolePanelOpen = visiblePanels.indexOf(panels.named.console) > -1;\r\n      if (!outputPanelOpen && !consolePanelOpen) {\r\n        return;\r\n      }\r\n      // this is a flag that helps detect crashed runners\r\n      if (jsbin.settings.includejs) {\r\n        store.sessionStorage.setItem('runnerPending', 1);\r\n      }\r\n\r\n      renderer.postMessage('render', {\r\n        //source: source,\r\n        codes : codes, // modified by lwf\r\n        options: {\r\n          injectCSS: jsbin.state.hasBody && panels.focused.id === 'css',\r\n          requested: requested,\r\n          debug: jsbin.settings.debug,\r\n          includeJsInRealtime: jsbin.settings.includejs,\r\n        },\r\n      });\r\n\r\n      jsbin.state.hasBody = true;\r\n\r\n    });\r\n  };\r\n  return jsbin.coder.editors.panels = panels;\r\n});"]}