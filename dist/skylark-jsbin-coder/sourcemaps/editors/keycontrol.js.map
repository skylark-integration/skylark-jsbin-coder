{"version":3,"sources":["editors/keycontrol.js"],"names":["define","$","jsbin","coder","autocomplete","panels","keyboardHelpVisible","customKeys","objectValue","enableAltUse","settings","keys","useAlt","this","checked","save","attr","change","disabled","$body","addClass","keydown","keycontrol","panelShortcuts","start","ua","navigator","userAgent","indexOf","browser","platform","test","$document","event","includeAltKey","altKey","closekey","closePanel","ctrlKey","metaKey","which","trigger","preventDefault","shiftKey","embed","saveChecksum","click","hasClass","focused","hide","id","hideheader","console","visible","jsconsole","reset","clear","myEvent","type","orig","charCode","keyCode","oldStop","stop","stopping","call","normalise","panel","editor","codePanel","css","javascript","html","hasRun","named","live","sendReload","undefined","show","seenWarning","cmd","content","delegate","window","location","reload","opendropdown","prev","removeClass","somethingSelected","cur","getCursor","token","getTokenAt","string","ch","end","state","className","replaceRange","htmlState","context","tagName","line","startTagComplete","editors"],"mappings":";;;;;;;AAAAA,QACE,iBACC,WACA,WACA,iBACA,YACD,SAAUC,EAAEC,EAAMC,EAAMC,EAAaC,GAErC,IAAIC,GAAsB,EAEtBC,EAAaL,EAAMM,YAAY,gBAAiBN,OAEpD,SAASO,IACFP,EAAMQ,SAASC,OAClBT,EAAMQ,SAASC,SAEjBT,EAAMQ,SAASC,KAAKC,OAASC,KAAKC,QAClCJ,SAASK,OAGXd,EAAE,mBAAmBe,KAAK,YAAWT,EAAWK,QAAuBK,OAAOR,GAEzEF,EAAWW,SAGdhB,EAAMiB,MAAMC,SAAS,uBAFrBlB,EAAMiB,MAAME,QAAQC,GAKtB,IAAIC,GACJC,MAAuB,IASnBC,EAAKC,UAAUC,WACU,IAAzBF,EAAGG,QAAQ,SACb3B,EAAE4B,QAAQC,SAAW,MACZ,gBAAgBC,KAAKN,GAC9BxB,EAAE4B,QAAQC,SAAW,MACZ,QAAQC,KAAKN,GACtBxB,EAAE4B,QAAQC,SAAW,QAErB7B,EAAE4B,QAAQC,SAAW,GAIlBvB,EAAWW,UACdhB,EAAM8B,UAAUX,QAAQ,SAAUY,GAChC,IAAIC,EAAgB3B,EAAWK,OAASqB,EAAME,QAAUF,EAAME,OAC1DC,EAAW7B,EAAW8B,WAAa9B,EAAW8B,WAAa,GAS/D,GAPIJ,EAAMK,SAAkC,QAAvBrC,EAAE4B,QAAQC,WAAsBG,EAAMM,SAAU,GAOjEN,EAAMM,SAA2B,KAAhBN,EAAMO,MACzBvC,EAAE,aAAawC,QAAQ,QAAS,YAChCR,EAAMS,sBACD,GAAIT,EAAMM,SAAWN,EAAMU,UAA4B,IAAhBV,EAAMO,MAClDvC,EAAE,qBAAqBwC,QAAQ,QAAS,YACxCR,EAAMS,sBACD,IAAKxC,EAAM0C,OAASX,EAAMM,SAA2B,KAAhBN,EAAMO,OAChD,IAAuB,IAAnBP,EAAMU,SACJzC,EAAM2C,cACR3C,EAAM2C,cAAe,EACrB3C,EAAM8B,UAAUS,QAAQ,aAGxBxC,EAAE,gBAAgB6C,QAEpBb,EAAMS,sBACD,IAAuB,IAAnBT,EAAMU,SAAmB,CACjB1C,EAAE,cACJ8C,SAAS,QAGxB9C,EAAE,gBAAgBwC,QAAQ,aAC1BR,EAAMS,uBAECT,EAAMO,QAAUJ,GAAYH,EAAMM,SAAWL,GAAiB7B,EAAO2C,QAC9E3C,EAAO4C,KAAK5C,EAAO2C,QAAQE,IACF,MAAhBjB,EAAMO,QAAkBP,EAAMM,SAAWN,EAAMK,UACxDpC,EAAMQ,SAASyC,YAAcjD,EAAMQ,SAASyC,WAC5CjD,EAAMiB,MAAMjB,EAAMQ,SAASyC,WAAa,WAAa,eAAe,eAC3C,KAAhBlB,EAAMO,OAAgBP,EAAMK,SAAWjC,EAAOA,OAAO+C,QAAQC,UAClEpB,EAAMU,SAERW,UAAUC,QAGVD,UAAUE,WAQlB,SAASlC,EAAWW,GAClBA,EAwHF,SAAmBA,GACjB,IAAIwB,GACFC,KAAMzB,EAAMyB,KACZlB,MAAOP,EAAMO,MACbD,QAASN,EAAMM,QACfI,SAAUV,EAAMU,SAChBL,QAASL,EAAMK,QACfH,OAAQF,EAAME,OACdwB,KAAM1B,GAGa,OAAhBA,EAAMO,OAAsC,OAAnBP,EAAM2B,UAAuC,OAAlB3B,EAAM4B,UAC7DJ,EAAQjB,MAA2B,OAAnBP,EAAM2B,SAAoB3B,EAAM2B,SAAW3B,EAAM4B,UAI7D5B,EAAMM,SAAWN,EAAMK,UAC3BmB,EAAQlB,QAAUN,EAAMK,SAON,IAAhBL,EAAMO,QAAiC,IAAlBP,EAAMK,UAAuC,IAAnBL,EAAMU,UAAoC,YAAfV,EAAMyB,OAClFD,EAAQjB,MAAQ,KAGlB,IAAIsB,EAAU7B,EAAM8B,KAMpB,OALAN,EAAQM,KAAO,WACbN,EAAQO,UAAW,EACfF,GAAUA,EAAQG,KAAKhC,IAGtBwB,EA1JCS,CAAUjC,GAElB,IAAIkC,KAEA9D,EAAO2C,SAAW3C,EAAO2C,QAAQoB,OACnCD,EAAQ9D,EAAO2C,QAAQoB,OACd/D,EAAO2C,UAChBmB,EAAQ9D,EAAO2C,SAGjB,IAAIqB,GAAcC,IAAK,EAAGC,WAAY,EAAGC,KAAM,GAAGL,EAAMjB,IACpDuB,GAAS,EAETvC,EAAgB3B,EAAWK,OAASqB,EAAME,QAAUF,EAAME,OAa9D,GAAmB,YAAfF,EAAMyB,KAAoB,CA2B5B,GA1BIW,GACEpC,EAAMM,SAA2B,KAAhBN,EAAMO,QACrBnC,EAAOqE,MAAMtB,QAAQC,UAAYhD,EAAOqE,MAAMC,KAAKtB,SACrDoB,GAAS,EAETxE,EAAE,eAAewC,QAAQ,QAAS,cACzBpC,EAAOqE,MAAMC,KAAKtB,QAE3BpD,EAAE,kBAAkBwC,QAAQ,QAAS,YACrCgC,GAAS,GAMPA,EACFxC,EAAM8B,OAINa,mBAM8BC,IAAhCtD,EAAeU,EAAMO,QAAwBP,EAAMM,SAAWL,EAChE,GAAI7B,EAAO2C,QAAQE,KAAO3B,EAAeU,EAAMO,OAI7CnC,EAAO4C,KAAK1B,EAAeU,EAAMO,QACjCP,EAAM8B,YAMN,GAHA1D,EAAOyE,KAAKvD,EAAeU,EAAMO,QACjCP,EAAM8B,SAEDxD,EAAWK,QAAYV,EAAMQ,SAASC,MAAST,EAAMQ,SAASC,KAAKoE,aAAc,CACpF,IAAIC,EAA6B,QAAvB/E,EAAE4B,QAAQC,SAAqB,MAAQ,OAC5C5B,EAAMQ,SAASC,OAClBT,EAAMQ,SAASC,SAEjBT,EAAMQ,SAASC,KAAKoE,aAAc,EAClC7E,EAAM8B,UAAUS,QAAQ,OACtBiB,KAAM,eACNuB,QAAS,4FAA8FD,EAAM,2CAA6CA,EAAM,yHAElK/E,EAAE,QAAQiF,SAAS,kBAAmB,QAAS,WAC7CzE,EAAawD,KAAKpD,MAClBsE,OAAOC,SAASC,WAMxB,GAAoB,MAAhBpD,EAAMO,OAAiBP,EAAMM,SAAWN,EAAMU,SAEhD2C,aAAarF,EAAE,SAASsF,OAAO,IAC/BtD,EAAM8B,YACD,GAAoB,KAAhB9B,EAAMO,OAAgBlC,EAC/BJ,EAAMiB,MAAMqE,YAAY,gBACxBlF,GAAsB,EACtB2B,EAAM8B,YACD,GAAoB,KAAhB9B,EAAMO,OAAgBnC,EAAO2C,SAAWqB,QAG5C,GAAoB,MAAhBpC,EAAMO,OAAiBN,GAAiBD,EAAMM,SAAwB,SAAb4B,EAAMjB,GAAe,CAEvF,GAAIiB,EAAMsB,oBAAsB,OAEhC,IAAIC,EAAMvB,EAAMwB,WAAU,GAAQC,EAAQzB,EAAM0B,WAAWH,GAEtD,YAAY3D,KAAK6D,EAAME,UAC1BF,GAAiBpE,MAAOkE,EAAIK,GAAIC,IAAKN,EAAIK,GAAID,OAAQ,GAAIG,MAAOL,EAAMK,MACrDC,UAA4B,MAAjBN,EAAME,OAAiB,cAAgB,OAGrE3B,EAAMgC,aAAa,KAAOP,EAAMK,MAAMG,UAAUC,QAAQC,QAAU,KAAMC,KAAMb,EAAIa,KAAMR,GAAIH,EAAMI,MAAOO,KAAMb,EAAIa,KAAMR,GAAIH,EAAMI,MACnI/D,EAAM8B,YACD,GAAoB,MAAhB9B,EAAMO,OAAiBP,EAAMK,SAAWL,EAAMU,UAAY0B,EAGnE,OADApC,EAAM8B,OACC3D,EAAaoG,iBAAiBrC,GAKzC,GAAIlC,EAAM+B,SACR,OAAO,EAyCX,OAAO7D,EAAMsG,QAAQnF,WAAaA","file":"../../editors/keycontrol.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n   \"../jsbin\",\r\n   \"../coder\",\r\n   \"./autocomplete\",\r\n   \"./panels\"\r\n],function ($,jsbin,coder,autocomplete,panels) {\r\n  /*globals objectValue, $, jsbin, $body, $document, saveChecksum, jsconsole*/\r\n  var keyboardHelpVisible = false;\r\n\r\n  var customKeys = jsbin.objectValue('settings.keys', jsbin) || {};\r\n\r\n  function enableAltUse() {\r\n    if (!jsbin.settings.keys) {\r\n      jsbin.settings.keys = {};\r\n    }\r\n    jsbin.settings.keys.useAlt = this.checked;\r\n    settings.save();\r\n  }\r\n\r\n  $('input.enablealt').attr('checked', customKeys.useAlt ? true : false).change(enableAltUse);\r\n\r\n  if (!customKeys.disabled) {\r\n    jsbin.$body.keydown(keycontrol);\r\n  } else {\r\n    jsbin.$body.addClass('nokeyboardshortcuts');\r\n  }\r\n\r\n  var panelShortcuts = {};\r\n  panelShortcuts.start = 48;\r\n  //   49: 'javascript', // 1\r\n  //   50: 'css', // 2\r\n  //   51: 'html', // 3\r\n  //   52: 'console', // 4\r\n  //   53: 'live' // 5\r\n  // };\r\n\r\n  // work out the browser platform\r\n  var ua = navigator.userAgent;\r\n  if (ua.indexOf(' Mac ') !== -1) {\r\n    $.browser.platform = 'mac';\r\n  } else if (/windows|win32/.test(ua)) {\r\n    $.browser.platform = 'win';\r\n  } else if (/linux/.test(ua)) {\r\n    $.browser.platform = 'linux';\r\n  } else {\r\n    $.browser.platform = '';\r\n  }\r\n\r\n\r\n  if (!customKeys.disabled) {\r\n    jsbin.$document.keydown(function (event) {\r\n      var includeAltKey = customKeys.useAlt ? event.altKey : !event.altKey,\r\n          closekey = customKeys.closePanel ? customKeys.closePanel : 48;\r\n\r\n      if (event.ctrlKey && $.browser.platform !== 'mac') { event.metaKey = true; }\r\n\r\n      // if (event.metaKey && event.which === 89 && !event.shiftKey) {\r\n      //   archive(!jsbin.state.metadata.archive);\r\n      //   return event.preventDefault();\r\n      // }\r\n\r\n      if (event.metaKey && event.which === 79) { // open\r\n        $('a.homebtn').trigger('click', 'keyboard');\r\n        event.preventDefault();\r\n      } else if (event.metaKey && event.shiftKey && event.which === 8) { // cmd+shift+backspace\r\n        $('a.deletebin:first').trigger('click', 'keyboard');\r\n        event.preventDefault();\r\n      } else if (!jsbin.embed && event.metaKey && event.which === 83) { // save\r\n        if (event.shiftKey === false) {\r\n          if (jsbin.saveChecksum) {\r\n            jsbin.saveChecksum = false;\r\n            jsbin.$document.trigger('snapshot');\r\n          } else {\r\n            // trigger an initial save\r\n            $('a.save:first').click();\r\n          }\r\n          event.preventDefault();\r\n        } else if (event.shiftKey === true) { // shift+s = open share menu\r\n          var $sharemenu = $('#sharemenu');\r\n          if ($sharemenu.hasClass('open')) {\r\n\r\n          }\r\n          $('#sharemenu a').trigger('mousedown');\r\n          event.preventDefault();\r\n        }\r\n      } else if (event.which === closekey && event.metaKey && includeAltKey && panels.focused) {\r\n        panels.hide(panels.focused.id);\r\n      } else if (event.which === 220 && (event.metaKey || event.ctrlKey)) {\r\n        jsbin.settings.hideheader = !jsbin.settings.hideheader;\r\n        jsbin.$body[jsbin.settings.hideheader ? 'addClass' : 'removeClass']('hideheader');\r\n      } else if (event.which === 76 && event.ctrlKey && panels.panels.console.visible) {\r\n        if (event.shiftKey) {\r\n          // reset\r\n          jsconsole.reset();\r\n        } else {\r\n          // clear\r\n          jsconsole.clear();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  var ignoreNextKey = false;\r\n\r\n  function keycontrol(event) {\r\n    event = normalise(event);\r\n\r\n    var panel = {};\r\n\r\n    if (panels.focused && panels.focused.editor) {\r\n      panel = panels.focused.editor;\r\n    } else if (panels.focused) {\r\n      panel = panels.focused;\r\n    }\r\n\r\n    var codePanel = { css: 1, javascript: 1, html: 1}[panel.id],\r\n        hasRun = false;\r\n\r\n    var includeAltKey = customKeys.useAlt ? event.altKey : !event.altKey;\r\n\r\n    // if (event.which === 27 && !ignoreNextKey) {\r\n    //   ignoreNextKey = true;\r\n    //   return;\r\n    // } else if (ignoreNextKey && panelShortcuts[event.which] !== undefined && event.metaKey && includeAltKey) {\r\n    //   ignoreNextKey = false;\r\n    //   return;\r\n    // } else if (!event.metaKey) {\r\n    //   ignoreNextKey = false;\r\n    // }\r\n\r\n    // these should fire when the key goes down\r\n    if (event.type === 'keydown') {\r\n      if (codePanel) {\r\n        if (event.metaKey && event.which === 13) {\r\n          if (panels.named.console.visible && !panels.named.live.visible) { // editors => panels.named\r\n            hasRun = true;\r\n            // panels.named.console.render(); // editors => panels.named\r\n            $('#runconsole').trigger('click', 'keyboard');\r\n          } else if (panels.named.live.visible) {\r\n            // panels.named.live.render(true); // editors => panels.named\r\n            $('#runwithalerts').trigger('click', 'keyboard');\r\n            hasRun = true;\r\n          } else {\r\n            $('#runwithalerts').trigger('click', 'keyboard');\r\n            hasRun = true;\r\n          }\r\n\r\n          if (hasRun) {\r\n            event.stop();\r\n          } else {\r\n            // if we have write access - do a save - this will make this bin our latest for use with\r\n            // /<user>/last/ - useful for phonegap inject\r\n            sendReload();\r\n          }\r\n        }\r\n      }\r\n\r\n      // shortcut for showing a panel\r\n      if (panelShortcuts[event.which] !== undefined && event.metaKey && includeAltKey) {\r\n        if (panels.focused.id === panelShortcuts[event.which]) {\r\n          // this has been disabled in favour of:\r\n          // if the panel is visible, and the user tries cmd+n - then the browser\r\n          // gets the key command.\r\n          panels.hide(panelShortcuts[event.which]);\r\n          event.stop();\r\n        } else {\r\n          // show\r\n          panels.show(panelShortcuts[event.which]);\r\n          event.stop();\r\n\r\n          if (!customKeys.useAlt && (!jsbin.settings.keys || !jsbin.settings.keys.seenWarning)) {\r\n            var cmd = $.browser.platform === 'mac' ? 'cmd' : 'ctrl';\r\n            if (!jsbin.settings.keys) {\r\n              jsbin.settings.keys = {};\r\n            }\r\n            jsbin.settings.keys.seenWarning = true;\r\n            jsbin.$document.trigger('tip', {\r\n              type: 'notification',\r\n              content: '<label><input type=\"checkbox\" class=\"enablealt\"> <strong>Turn this off</strong>. Reserve ' + cmd + '+[n] for switching browser tabs and use ' + cmd + '+<u>alt</u>+[n] to switch JS Bin panels. You can access this any time in <strong>Help&rarr;Keyboard</strong></label>'\r\n            });\r\n            $('#tip').delegate('input.enablealt', 'click', function () {\r\n              enableAltUse.call(this);\r\n              window.location.reload();\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (event.which === 191 && event.metaKey && event.shiftKey) {\r\n        // show help\r\n        opendropdown($('#help').prev()[0]);\r\n        event.stop();\r\n      } else if (event.which === 27 && keyboardHelpVisible) {\r\n        jsbin.$body.removeClass('keyboardHelp');\r\n        keyboardHelpVisible = false;\r\n        event.stop();\r\n      } else if (event.which === 27 && panels.focused && codePanel) {\r\n        // event.stop();\r\n        // return CodeMirror.commands.autocomplete(panels.focused.editor);\r\n      } else if (event.which === 190 && includeAltKey && event.metaKey && panel.id === 'html') {\r\n        // auto close the element\r\n        if (panel.somethingSelected()) {return;}\r\n        // Find the token at the cursor\r\n        var cur = panel.getCursor(false), token = panel.getTokenAt(cur), tprop = token;\r\n        // If it's not a 'word-style' token, ignore the token.\r\n        if (!/^[\\w$_]*$/.test(token.string)) {\r\n          token = tprop = {start: cur.ch, end: cur.ch, string: '', state: token.state,\r\n                           className: token.string === '.' ? 'js-property' : null};\r\n        }\r\n\r\n        panel.replaceRange('</' + token.state.htmlState.context.tagName + '>', {line: cur.line, ch: token.end}, {line: cur.line, ch: token.end});\r\n        event.stop();\r\n      } else if (event.which === 188 && event.ctrlKey && event.shiftKey && codePanel) {\r\n        // start a new tag\r\n        event.stop();\r\n        return autocomplete.startTagComplete(panel);\r\n      }\r\n    }\r\n    // return true;\r\n\r\n    if (event.stopping) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function normalise(event) {\r\n    var myEvent = {\r\n      type: event.type,\r\n      which: event.which,\r\n      metaKey: event.metaKey,\r\n      shiftKey: event.shiftKey,\r\n      ctrlKey: event.ctrlKey,\r\n      altKey: event.altKey,\r\n      orig: event\r\n    };\r\n\r\n    if ( event.which === null && (event.charCode !== null || event.keyCode !== null) ) {\r\n      myEvent.which = event.charCode !== null ? event.charCode : event.keyCode;\r\n    }\r\n\r\n    // Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs)\r\n    if ( !event.metaKey && event.ctrlKey ) {\r\n      myEvent.metaKey = event.ctrlKey;\r\n    }\r\n\r\n    // this is retarded - I'm having to mess with the event just to get Firefox\r\n    // to send through the right value. i.e. when you include a shift key modifier\r\n    // in Firefox, if it's punctuation - event.which is zero :(\r\n    // Note that I'm only doing this for the ? symbol + ctrl + shift\r\n    if (event.which === 0 && event.ctrlKey === true && event.shiftKey === true && event.type === 'keydown') {\r\n      myEvent.which = 191;\r\n    }\r\n\r\n    var oldStop = event.stop;\r\n    myEvent.stop = function () {\r\n      myEvent.stopping = true;\r\n      if (oldStop) {oldStop.call(event);}\r\n    };\r\n\r\n    return myEvent;\r\n  }\r\n\r\n  return coder.editors.keycontrol = keycontrol;\r\n});"]}