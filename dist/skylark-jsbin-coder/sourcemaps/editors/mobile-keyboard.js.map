{"version":3,"sources":["editors/mobile-keyboard.js"],"names":["define","$","jsbin","commandMaps","panels","mobile","embed","mobileUtils","next","close","needle","field","ta","focused","editor","textarea","pos","selectionStart","createTextRange","startOffset","tagposition","value","substring","lastIndexOf","start","c","substr","matched","indexOf","tail","complete","id","CodeMirror","commands","call","_hasCompletions","_showCompletion","autocomplete","focus","buttons","html","css","js","console","all","strip","map","command","button","toinsert","label","replace","callback","on","getCursor","resetTo","offset","cursorPosition","character","replaceRange","setCursor","setCursorTo","$el","click","escapeHTML","find","append","panel","add","forEach","p","hideAll","hide","show","$document","named","javascript"],"mappings":"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","file":"../../editors/mobile-keyboard.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n   \"../jsbin\",\r\n   \"./mobile-command-maps\",\r\n   \"./panels\"\r\n],function ($,jsbin,commandMaps,panels) {\r\n  /* globals jsbin, $, escapeHTML, $document, editors, commandMaps */\r\n\r\n  if (!jsbin.mobile || jsbin.embed) {\r\n    return;\r\n  }\r\n\r\n  var getCursor = function (field) {\r\n    if (field.selectionStart) {\r\n      return field.selectionStart;\r\n    }\r\n    if (field.createTextRange) {\r\n      var range = field.createTextRange();\r\n      return range.startOffset;\r\n    }\r\n  };\r\n\r\n  var getTA = function () {\r\n    return jsbin.panels.focused.editor.textarea;\r\n  };\r\n\r\n  var mobileUtils = {\r\n    next: function () {\r\n\r\n    },\r\n    close: function (needle) {\r\n      var ta = getTA();\r\n      var pos = getCursor(ta);\r\n      // look backwards\r\n      var tagposition = ta.value.substring(0, pos).lastIndexOf(needle);\r\n      if (needle === '>') {\r\n        var start = 0;\r\n        while (start > -1) {\r\n          start = ta.value.substring(0, tagposition).lastIndexOf('<') + 1;\r\n          var c = ta.value.substr(start, 1);\r\n          if (c === '/') {\r\n            // we've got another closing tag, move back\r\n            var matched = ta.value.substr(start + 1, ta.value.substr(start).indexOf('>') - 1);\r\n            tagposition = ta.value.lastIndexOf('<' + matched);\r\n            continue;\r\n          }\r\n\r\n          if (c === '!') {\r\n            return '';\r\n          }\r\n\r\n          if (start === 0) {\r\n            return '';\r\n          }\r\n          break;\r\n        }\r\n\r\n        var tail = ta.value.substr(start, tagposition).indexOf(needle);\r\n        return '</' + ta.value.substr(start, tail) + '>$0';\r\n      }\r\n    },\r\n    complete: function () {\r\n      var focused = jsbin.panels.focused;\r\n      if (focused.id === 'html' || focused.id === 'css') {\r\n        CodeMirror.commands['emmet.expand_abbreviation_with_tab'].call(null, focused.editor);\r\n      } else if (focused.editor._hasCompletions && focused.editor._hasCompletions()) {\r\n        focused.editor._showCompletion();\r\n      } else {\r\n        CodeMirror.commands.autocomplete(focused.editor);\r\n      }\r\n      focused.editor.focus();\r\n    },\r\n  };\r\n\r\n  var buttons = {\r\n    html: $(),\r\n    css: $(),\r\n    js: $(),\r\n    console: $(),\r\n    all: $(),\r\n  };\r\n\r\n  var makeCommand = function (command) {\r\n    var button = $('<button>');\r\n    var toinsert = command.value;\r\n    var label = command.value.replace(/\\$0/, '');\r\n    if (!command.callback) {\r\n      command.callback = function () {\r\n        return toinsert;\r\n      };\r\n    }\r\n\r\n    button.on('click', function () {\r\n      var focused = jsbin.panels.focused;\r\n      if (focused.editor) {\r\n        var pos = focused.editor.getCursor();\r\n        var value = command.callback.call(mobileUtils);\r\n        if (value == null) {\r\n          return;\r\n        }\r\n        var resetTo = value.indexOf('$0');\r\n        if (resetTo === -1) {\r\n          resetTo = 0;\r\n        }\r\n        var offset = focused.editor.cursorPosition().character + resetTo;\r\n        if (pos !== -1) {\r\n          value = value.replace('$0', '');\r\n        }\r\n        focused.editor.replaceRange(value, pos, pos);\r\n        focused.editor.setCursor(offset);\r\n\r\n        focused.editor.textarea.focus();\r\n      } else if (focused.id === 'console') {\r\n        focused.setCursorTo(command.callback().replace('\\$0', ''), true);\r\n        focused.$el.click();\r\n      }\r\n    });\r\n\r\n    button.html(escapeHTML(label));\r\n    strip.find('div').append(button);\r\n\r\n    if (command.panel) {\r\n      if (typeof command.panel === 'string') {\r\n        buttons[command.panel] = buttons[command.panel].add(button);\r\n      } else {\r\n        command.panel.forEach(function (p) {\r\n          buttons[p] = buttons[p].add(button);\r\n        });\r\n      }\r\n      buttons.all = buttons.all.add(button);\r\n    }\r\n  };\r\n\r\n  var strip = $('<div id=\"strip\"><div class=\"inner-strip\"></div></div>');\r\n\r\n  commandMaps.map(makeCommand);\r\n\r\n  $('body').append(strip);\r\n\r\n  var hideAll = function (panel) {\r\n    return function () {\r\n      buttons.all.hide();\r\n      if (buttons[panel]) {\r\n        buttons[panel].show();\r\n      }\r\n    };\r\n  };\r\n\r\n  $document.on('jsbinReady', function () {\r\n    // hook up which buttons should be shown and when\r\n    panels.named.html.on('show', hideAll('html')); // editors => panels.named\r\n    panels.named.css.on('show', hideAll('css'));// editors => panels.named\r\n    panels.named.javascript.on('show', hideAll('js'));// editors => panels.named\r\n    panels.named.console.on('show', hideAll('console'));// editors => panels.named\r\n    hideAll(panels.focused.id === 'javascript' ? 'js' : panels.focused.id)();  // jsbin.panels =>panels\r\n  });\r\n});"]}