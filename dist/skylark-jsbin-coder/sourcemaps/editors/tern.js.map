{"version":3,"sources":["editors/tern.js"],"names":["define","$","jsbin","coder","CodeMirror"],"mappings":";;;;;;;AAAAA,QACE,iBACA,WACA,WACA,gBACA,SAAUC,EAAEC,EAAMC,EAAMC,GACxB","file":"../../editors/tern.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"../jsbin\",\r\n  \"../coder\",\r\n  \"./codemirror\"\r\n],function ($,jsbin,coder,CodeMirror) {\r\n  'use strict';\r\n  /*globals $, jsbin, CodeMirror, template, ternDefinitions, ternBasicDefs */\r\n\r\n  if (true || jsbin.embed || jsbin.mobile) {\r\n    return;\r\n  }\r\n\r\n  var ternServer;\r\n  var ternLoaded = {};\r\n\r\n  var initTern = function(editor, defs){\r\n    var keyMap = {\r\n      'Ctrl-Q': function(cm) { ternServer.selectName(cm); },\r\n      'Ctrl-I': function(cm) { ternServer.showType(cm); },\r\n      'Ctrl-Space': function(cm) { ternServer.complete(cm); }\r\n    };\r\n    if (typeof defs === 'undefined') {\r\n      defs = [];\r\n    }\r\n    ternServer = new CodeMirror.TernServer({\r\n      defs: defs,\r\n      useWorker: false,\r\n      cm: editor\r\n    });\r\n    editor.addKeyMap(keyMap);\r\n    editor.on('cursorActivity', function(cm) { ternServer.updateArgHints(cm); });\r\n  };\r\n\r\n  var addTernDefinition = function(def) {\r\n    if (typeof ternServer === 'object') {\r\n      ternServer.options.defs.push(def);\r\n      ternServer = new CodeMirror.TernServer({\r\n        defs: ternServer.options.defs,\r\n        useWorker: ternServer.options.useWorker,\r\n        tooltipType: ternServer.options.tooltipType,\r\n        cm: ternServer.options.cm\r\n      });\r\n    }\r\n  };\r\n\r\n  // Load the json defition of the library\r\n  var loadTernDefinition = function(name, file) {\r\n    if (!ternLoaded[name]) {\r\n      $.ajax({\r\n        url: file,\r\n        dataType: 'json',\r\n        success: function(data) {\r\n          addTernDefinition(data);\r\n          ternLoaded[name] = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Load the actual js library\r\n  var loadTernFile = function(name, file) {\r\n    if (!ternLoaded[name]) {\r\n      $.ajax({\r\n        url: file,\r\n        dataType: 'script',\r\n        success: function(data) {\r\n          ternServer.server.addFile(name, data);\r\n          ternLoaded[name] = true;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  var loadTern = function(editor) {\r\n    initTern(editor, ternBasicDefs);\r\n    ternLoaded.ecma5 = true;\r\n    ternLoaded.browser = true;\r\n  };\r\n\r\n  var searchTernDefinition = function(htmlCode) {\r\n    for (var i = 0; i < ternDefinitions.length; i++) {\r\n      if (ternDefinitions[i].match.test(htmlCode)) {\r\n        if (ternDefinitions[i].type === 'def') {\r\n          loadTernDefinition(ternDefinitions[i].name, ternDefinitions[i].file);\r\n        } else {\r\n          loadTernFile(ternDefinitions[i].name, ternDefinitions[i].file);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Overwrite the autocomplete function to use tern\r\n  CodeMirror.commands.autocomplete = function(cm) {\r\n    if (CodeMirror.snippets(cm) === CodeMirror.Pass) {\r\n      var pos = cm.getCursor();\r\n      var tok = cm.getTokenAt(pos);\r\n      var indent = '';\r\n      if (cm.options.indentWithTabs) {\r\n        indent = '\\t';\r\n      } else {\r\n        indent = new Array(cm.options.indentUnit * 1 + 1).join(' ');\r\n      }\r\n\r\n      // I don't like this - feel like we shouldnt be pseudo parsing the code around the cursor. - FO\r\n      // the && here is in the correct place, if the token type is null, but the token string is '.'\r\n      // then we're probably at the end of an object lookup so let's use tern for autocomplete\r\n      if (tok.string === ';' || tok.type === 'string' || tok.type === null && tok.string !== '.') {\r\n        return cm.replaceRange(indent, pos);\r\n      }\r\n      if (tok.string.trim() !== '') {\r\n        return ternServer.complete(cm);\r\n      }\r\n      return cm.replaceRange(indent, pos);\r\n    }\r\n  };\r\n\r\n  CodeMirror.startTern = function() {\r\n    loadTern(jsbin.panels.panels.javascript.editor);\r\n    searchTernDefinition(jsbin.panels.panels.html.getCode());\r\n\r\n    $('#library').bind('change', function () {\r\n      searchTernDefinition(jsbin.panels.panels.html.getCode());\r\n    });\r\n  };\r\n\r\n  return coder.editors.tern = {\r\n    startTern\r\n  };\r\n});\r\n"]}