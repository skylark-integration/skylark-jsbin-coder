{"version":3,"sources":["editors/codemirror.js"],"names":["define","CodeMirror","coder","WRAP_CLASS","BACK_CLASS","parseLinesToArray","str","active","toString","call","indexOf","range","split","i","parseInt","length","push","parseArrayToString","slice","clearHighlightedLines","cm","state","highlightedLines","removeLineClass","updateHighlightedLines","event","operation","addLineClass","signal","gutterClick","lineNumber","gutter","$","target","hasClass","shiftKey","sort","a","b","sameArray","highlightLines","defineOption","val","old","prev","Init","on","off","defineExtension","lines","this","string","editors"],"mappings":"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","file":"../../editors/codemirror.js","sourcesContent":["//= require \"../vendor/codemirror2/codemirror\"\r\n//= require \"../vendor/codemirror2/xml\"\r\n//= require \"../vendor/codemirror2/css\"\r\n//= require \"../vendor/codemirror2/javascript\"\r\n//= require \"../vendor/codemirror2/htmlmixed\"\r\n//= require \"../vendor/codemirror2/searchcursor\"\r\n\r\ndefine([\r\n\t\"skylark-codemirror/CodeMirror\",\r\n\t\"../coder\",\r\n    \"skylark-codemirror/mode/xml/xml\",\r\n    \"skylark-codemirror/mode/css/css\",\r\n    \"skylark-codemirror/mode/javascript/javascript\",\r\n    \"skylark-codemirror/mode/htmlmixed/htmlmixed\",\r\n    \"skylark-codemirror/mode/markdown/markdown\",\r\n\r\n    \"skylark-codemirror/addon/comment/comment\",\r\n\r\n    \"skylark-codemirror/addon/selection/active-line\",\r\n\r\n    \"skylark-codemirror/addon/fold/foldcode\",\r\n    \"skylark-codemirror/addon/fold/foldgutter\",\r\n    \"skylark-codemirror/addon/fold/brace-fold\",\r\n    \"skylark-codemirror/addon/fold/xml-fold\",\r\n    \"skylark-codemirror/addon/fold/indent-fold\",\r\n    \"skylark-codemirror/addon/fold/markdown-fold\",\r\n    \"skylark-codemirror/addon/fold/comment-fold\",\r\n\r\n    \"skylark-codemirror/addon/edit/matchbrackets\",\r\n    \"skylark-codemirror/addon/edit/closebrackets\",\r\n    \"skylark-codemirror/addon/edit/trailingspace\",\r\n\r\n    \"skylark-codemirror/addon/search/searchcursor\",\r\n    \"skylark-codemirror/addon/search/search\",\r\n    \"skylark-codemirror/addon/search/match-highlighter\",\r\n\r\n\r\n    ///\"skylark-codemirror/addon/keymap/emacs\",\r\n    ///\"skylark-codemirror/addon/keymap/sublime\",\r\n\r\n    \"skylark-codemirror/addon/dialog/dialog\",\r\n\r\n    \"skylark-codemirror/addon/hint/anyword-hint\",\r\n    \"skylark-codemirror/addon/hint/javascript-hint\",\r\n\r\n    \"skylark-codemirror/addon/lint/javascript-lint\",\r\n    \"skylark-codemirror/addon/lint/lint\",\r\n\r\n    \"skylark-codemirror/addon/tern/tern\"\r\n],function(CodeMirror,coder){\r\n \r\n  // moved from vendor/cm_addons/cm-highlight-line.js\r\n  var WRAP_CLASS = 'CodeMirror-highlight-line';\r\n  var BACK_CLASS = 'CodeMirror-highlight-line-background';\r\n\r\n  CodeMirror.defineOption('highlightLine', false, function(cm, val, old) {\r\n    var prev = old && old !== CodeMirror.Init;\r\n    if (val && !prev) {\r\n      cm.state.highlightedLines = [];\r\n      if (typeof val !== 'boolean') {\r\n        updateHighlightedLines(cm, parseLinesToArray(val));\r\n      }\r\n      cm.on('gutterClick', gutterClick);\r\n    } else if (!val && prev) {\r\n      cm.off('gutterClick', gutterClick);\r\n      clearHighlightedLines(cm);\r\n      delete cm.state.highlightedLines;\r\n    }\r\n  });\r\n\r\n  CodeMirror.defineExtension('highlightLines', function (lines) {\r\n    if (lines) {\r\n      clearHighlightedLines(this);\r\n      updateHighlightedLines(this, parseLinesToArray(lines));\r\n    } else {\r\n      var active = [].slice.call(this.state.highlightedLines);\r\n      return {\r\n        lines: active,\r\n        string: parseArrayToString(active)\r\n      };\r\n    }\r\n  });\r\n\r\n  function parseLinesToArray(str) {\r\n    var active = [];\r\n\r\n    if (({}).toString.call(str) === '[object Array]') {\r\n      // wat...oh you gave me an array\r\n      return str;\r\n    }\r\n\r\n    if (str.indexOf('-') !== -1) {\r\n      // range\r\n      var range = str.split('-');\r\n      var i = parseInt(range[0], 10);\r\n      var length = parseInt(range[1], 10);\r\n      for (; i <= length; i++) {\r\n        active.push(i-1);\r\n      }\r\n    } else {\r\n      active = [parseInt(str, 10) - 1];\r\n    }\r\n\r\n    return active;\r\n  }\r\n\r\n  function parseArrayToString(active) {\r\n    if (active.length === 1) {\r\n      return (active[0] + 1) + '';\r\n    } else if (active.length === 0) {\r\n      return '';\r\n    } else {\r\n      return (active[0] + 1) + '-' + (active.slice(-1)[0] + 1);\r\n    }\r\n  }\r\n\r\n  function clearHighlightedLines(cm) {\r\n    for (var i = 0; i < cm.state.highlightedLines.length; i++) {\r\n      cm.removeLineClass(cm.state.highlightedLines[i], 'wrap', WRAP_CLASS);\r\n      cm.removeLineClass(cm.state.highlightedLines[i], 'background', BACK_CLASS);\r\n    }\r\n    cm.state.highlightedLines = [];\r\n  }\r\n\r\n  function sameArray(a, b) {\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n    for (var i = 0; i < a.length; i++) {\r\n      if (a[i] !== b[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function highlightLines(cm, lineNumber, event) {\r\n    // copy the array (to avoid creating a reference)\r\n    var active = [].slice.call(cm.state.highlightedLines, 0);\r\n\r\n    // shiftKey down gives multi-line highlight support\r\n    if (active.length && event.shiftKey) {\r\n      var i = active[0];\r\n      active = [];\r\n\r\n      // then highlight *to* this line\r\n      if (lineNumber < i) {\r\n        // highlight *up* to this new number\r\n        // reduce highlight to this point\r\n        for (; i >= lineNumber; i--) {\r\n          active.push(i);\r\n        }\r\n      } else {\r\n        // reduce highlight to this point\r\n        for (; i <= lineNumber; i++) {\r\n          active.push(i);\r\n        }\r\n      }\r\n    } else if (active.indexOf(lineNumber) === -1) {\r\n      active = [lineNumber]; // only select one line\r\n    }\r\n\r\n    // sort the line numbers so when the user gets them in the event, it's vaguely sane.\r\n    active = active.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n\r\n    if (sameArray(cm.state.highlightedLines, active)) {\r\n      clearHighlightedLines(cm);\r\n      if (event) {\r\n        // only signal if it came from a user action\r\n        signal(cm, active);\r\n      }\r\n      return;\r\n    }\r\n\r\n    updateHighlightedLines(cm, active, event);\r\n  }\r\n\r\n  function updateHighlightedLines(cm, active, event) {\r\n    cm.operation(function() {\r\n      clearHighlightedLines(cm);\r\n      for (var i = 0; i < active.length; i++) {\r\n        cm.addLineClass(active[i], 'wrap', WRAP_CLASS);\r\n        cm.addLineClass(active[i], 'background', BACK_CLASS);\r\n      }\r\n      cm.state.highlightedLines = active;\r\n      if (event) {\r\n        // only signal if it came from a user action\r\n        signal(cm, active);\r\n      }\r\n    });\r\n  }\r\n\r\n  function signal(cm, active) {\r\n    CodeMirror.signal(cm, 'highlightLines', cm, active, parseArrayToString(active));\r\n  }\r\n\r\n  function gutterClick(cm, lineNumber, gutter, event) {\r\n    if ($(event.target).hasClass('CodeMirror-linenumber')) {\r\n      highlightLines(cm, lineNumber, event);\r\n    }\r\n  }\r\n\r\n\r\n\treturn coder.editors.CodeMirror = CodeMirror;\r\n});\r\n"]}