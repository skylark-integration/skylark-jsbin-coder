{"version":3,"sources":["editors/panel.js"],"names":["define","$","store","processors","hideOpen","jsbin","coder","CodeMirror","analytics","$document","document","$source","userResizeable","hasClass","editorModes","html","javascript","css","typescript","markdown","coffeescript","livescript","jsx","less","sass","scss","processing","jade","clojurescript","badChars","RegExp","settings","editor","tabMode","keyMap","basic","Tab","undefined","commands","autocomplete","cm","snippets","Pass","simpleHint","hint","indexOf","options","mode","anyword","oldCodeMirror","mobile","Panel","name","panel","this","$panel","cmSettings","panelLanguage","$panelwrapper","id","data","$el","detach","appendTo","parent","hide","el","getElementById","order","label","_eventHandlers","on","panels","updateQuery","nosplitter","parserfile","readOnly","state","embed","dragDrop","theme","highlightLine","lineNumbers","lineWrapping","foldGutter","gutters","extend","extraKeys","syntax","profile","tabSize","parseInt","indentUnit","fromTextArea","window","location","hash","getHighlightLines","changeObj","saveDisabled","trigger","panelId","revert","origin","focus","cmd","browser","platform","map","toggleComment","addKeyMap","_setupEditor","is","splitter","removeClass","set","processor","str","Promise","resolve","beforeRender","bind","proxy","ready","controlButton","updateAriaState","toggle","add","find","click","populateEditor","codeSet","changed","cached","sessionStorage","getItem","saved","localStorage","sessionURL","getURL","checksum","removeItem","saveChecksum","template","setCode","root","post","test","search","JSON","parse","editors","named","clearHistory","onload","prototype","virgin","visible","attr","show","x","panelCount","length","showPanel","hideAll","closest","$body","addClass","call","matchMedia","matches","setTimeout","distribute","top","outerHeight","scroller","init","fromShow","getRenderedCode","render","hidePanel","prev","toggleClass","getCode","trim","getVisible","focused","lastIndex","replace","content","blur","args","slice","arguments","reject","then","apply","focusedPanel","setValue","err","getValue","currentLine","getCursor","line","_focus","win","getWrapperElement","getScrollerElement","$label","body","className","event","getScrollInfo","stop","animate","opacity","height","offset","filter","lameEditor","refresh","e","style","paddingLeft","tablet","code","split","blank","i","setCursor","ch","fn","push","unshift","type","list","processorName","callback","cmMode","smartIndent","setOption","defaultProcessor","mmMode","getOption","lintStop","hintingDone"],"mappings":"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","file":"../../editors/panel.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"skylark-jsbin-base/storage\",\r\n  \"skylark-jsbin-processors\",\r\n  \"skylark-jsbin-chrome/hideOpen\",\r\n   \"../jsbin\",\r\n   \"../coder\",\r\n  \"./codemirror\",\r\n  \"../chrome/analytics\",\r\n  \"./snippets.cm\",\r\n  \"skylark-jsbin-chrome/splitter\"\r\n],function ($,store,processors,hideOpen, jsbin,coder,CodeMirror,analytics) {\r\n  /*globals $, CodeMirror, jsbin, jshintEnabled, */\r\n  var $document = $(document),\r\n      $source = $('#source'),\r\n      userResizeable = !$('html').hasClass('layout');\r\n\r\n  var editorModes = {\r\n    html: 'htmlmixed',\r\n    javascript: 'javascript',\r\n    css: 'css',\r\n    typescript: 'javascript',\r\n    markdown: 'markdown',\r\n    coffeescript: 'coffeescript',\r\n    livescript: 'text/x-livescript',\r\n    jsx: 'javascript',\r\n    less: 'text/x-less',\r\n    sass: 'text/x-sass',\r\n    scss: 'text/x-scss',\r\n    processing: 'text/x-csrc',\r\n    jade: 'text/x-jade',\r\n    clojurescript: 'clojure'\r\n  };\r\n\r\n  var badChars = new RegExp('[\\u200B\\u0080-\\u00a0]', 'g');\r\n\r\n  if (jsbin.settings.editor.tabMode === 'default') {\r\n    CodeMirror.keyMap.basic.Tab = undefined;\r\n  } else if (jsbin.settings.editor.tabMode !== 'classic') {\r\n    CodeMirror.keyMap.basic.Tab = 'indentMore';\r\n  }\r\n\r\n  if (!CodeMirror.commands) {\r\n    CodeMirror.commands = {};\r\n  }\r\n\r\n  // Save a reference to this autocomplete function to use it when Tern scripts\r\n  // are loaded but not used, since they will automatically overwrite the\r\n  // CodeMirror autocomplete function with CodeMirror.showHint\r\n  var simpleJsHint = function(cm) {\r\n    if (CodeMirror.snippets(cm) === CodeMirror.Pass) {\r\n      return CodeMirror.simpleHint(cm, CodeMirror.hint.javascript);\r\n    }\r\n  };\r\n\r\n  CodeMirror.commands.autocomplete = simpleJsHint;\r\n\r\n  CodeMirror.commands.snippets = function (cm) {\r\n    'use strict';\r\n    if (['htmlmixed', 'javascript', 'css', editorModes['less'], editorModes['sass'], editorModes['scss']].indexOf(cm.options.mode) === -1) {\r\n      return CodeMirror.simpleHint(cm, CodeMirror.hint.anyword);\r\n    } else if (oldCodeMirror) {\r\n      return oldCodeMirror.snippets(cm);\r\n    } else if (!jsbin.mobile) {\r\n      return CodeMirror.snippets(cm);\r\n    }\r\n  };\r\n\r\n  var Panel = function (name, settings) {\r\n    'use strict';\r\n    var panel = this,\r\n        showPanelButton = true,\r\n        $panel = null,\r\n        splitterSettings = {},\r\n        cmSettings = {},\r\n        panelLanguage = name,\r\n        $panelwrapper = $('<div class=\"stretch panelwrapper\"></div>');\r\n\r\n    panel.settings = settings = settings || {};\r\n    panel.id = panel.name = name;\r\n    $panel = $('.panel.' + name);\r\n    $panel.data('name', name);\r\n    panel.$el = $panel.detach();\r\n    panel.$el.appendTo($panelwrapper);\r\n    $panelwrapper.appendTo($source);\r\n    panel.$panel = panel.$el;\r\n    panel.$el = panel.$el.parent().hide();\r\n    panel.el = document.getElementById(name);\r\n    panel.order = ++Panel.order;\r\n\r\n    panel.label = (settings.label || name);\r\n\r\n    panel.$el.data('panel', panel);\r\n\r\n    this._eventHandlers = {};\r\n\r\n    panel.on('show', panels.updateQuery);\r\n    panel.on('hide', panels.updateQuery);\r\n\r\n    // keyboard shortcut (set in keyboardcontrol.js)\r\n    // panelShortcuts[panelShortcuts.start + panel.order] = panel.id; //TODO:\r\n\r\n    if (panel.order === 1) {\r\n      settings.nosplitter = true;\r\n    }\r\n\r\n    if (settings.editor) {\r\n      cmSettings = {\r\n        parserfile: [],\r\n        readOnly: jsbin.state.embed ? 'nocursor' : false,\r\n        dragDrop: false, // we handle it ourselves\r\n        mode: editorModes[panelLanguage],\r\n        ///lineWrapping: false,\r\n        // gutters: ['line-highlight'],\r\n        theme: jsbin.settings.theme || 'jsbin',\r\n        highlightLine: true,\r\n\r\n        lineNumbers: true,\r\n        lineWrapping: true,\r\n        foldGutter: true,\r\n        gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"]\r\n\r\n      };\r\n\r\n      $.extend(cmSettings, jsbin.settings.editor || {});\r\n\r\n      cmSettings.extraKeys = {};\r\n\r\n      // only the js panel for now, I'd like this to work in\r\n      // the HTML panel too, but only when you were in JS scope\r\n      if (name === 'javascript') {\r\n        cmSettings.extraKeys.Tab = 'autocomplete';\r\n      } else {\r\n        cmSettings.extraKeys.Tab = 'snippets';\r\n      }\r\n\r\n\r\n      if (name === 'html') {\r\n        // some emmet \"stuff\" - TODO decide whether this is needed still...\r\n        $.extend(cmSettings, {\r\n          syntax: name, // define Zen Coding syntax\r\n          profile: name, // define Zen Coding output profile\r\n        });\r\n      }\r\n\r\n      // make sure tabSize and indentUnit are numbers\r\n      if (typeof cmSettings.tabSize === 'string') {\r\n        cmSettings.tabSize = parseInt(cmSettings.tabSize, 10) || 2;\r\n      }\r\n      if (typeof cmSettings.indentUnit === 'string') {\r\n        cmSettings.indentUnit = parseInt(cmSettings.indentUnit, 10) || 2;\r\n      }\r\n\r\n      panel.editor = CodeMirror.fromTextArea(panel.el, cmSettings);\r\n\r\n      ///if (name === 'html' || name === 'css') {\r\n      ///  delete emmetCodeMirror.defaultKeymap['Cmd-D'];\r\n      ///  delete emmetCodeMirror.defaultKeymap['Ctrl-D'];\r\n      ///  emmetCodeMirror(panel.editor);\r\n      ///}\r\n\r\n      panel.editor.on('highlightLines', function () {\r\n        window.location.hash = panels.getHighlightLines();\r\n      });\r\n\r\n      // Bind events using CM3 syntax\r\n      panel.editor.on('change', function codeChange(cm, changeObj) {\r\n        if (jsbin.saveDisabled) {\r\n          $document.trigger('codeChange.live', [{ panelId: panel.id, revert: true, origin: changeObj.origin }]);\r\n        } else {\r\n          $document.trigger('codeChange', [{ panelId: panel.id, revert: true, origin: changeObj.origin }]);\r\n        }\r\n        return true;\r\n      });\r\n\r\n      panel.editor.on('focus', function () {\r\n        panel.focus();\r\n      });\r\n\r\n      // Restore keymaps taken by emmet but that we need for other functionalities\r\n      if (name === 'javascript') {\r\n        var cmd = $.browser.platform === 'mac' ? 'Cmd' : 'Ctrl';\r\n        var map = {};\r\n        map[cmd + '-D'] = 'deleteLine';\r\n        map[cmd + '-/'] = function(cm) { CodeMirror.commands.toggleComment(cm); };\r\n        map.name = 'noEmmet';\r\n        panel.editor.addKeyMap(map);\r\n      }\r\n\r\n      panel._setupEditor(panel.editor, name);\r\n    }\r\n\r\n    if ($('html').is('.layout')) {\r\n      panel.splitter = $();\r\n      panel.$el.removeClass('stretch');\r\n    } else if (!settings.nosplitter) {\r\n      panel.splitter = panel.$el.splitter(splitterSettings).data('splitter');\r\n      panel.splitter.hide();\r\n    } else {\r\n      // create a fake splitter to let the rest of the code work\r\n      panel.splitter = $();\r\n    }\r\n\r\n    if (jsbin.state.processors && jsbin.state.processors[name]) {\r\n      panelLanguage = jsbin.state.processors[name];\r\n      processors.set(panel, jsbin.state.processors[name]);\r\n    } else if (settings.processor) { // FIXME is this even used?\r\n      panelLanguage = settings.processors[settings.processor];\r\n      processors.set(panel, settings.processor);\r\n    } else if (processors[panel.id]) {\r\n      processors.set(panel, panel.id);\r\n    } else {\r\n      // this is just a dummy function for console & output...which makes no sense...\r\n      panel.processor = function (str) {\r\n        return new Promise(function (resolve) {\r\n          resolve(str);\r\n        });\r\n      };\r\n\r\n    }\r\n\r\n    if (settings.beforeRender) {\r\n      $document.bind('render', $.proxy(settings.beforeRender, panel));\r\n    }\r\n\r\n    if (!settings.editor) {\r\n      panel.ready = true;\r\n    }\r\n\r\n    // append panel to controls\r\n    if (jsbin.state.embed) {\r\n      // showPanelButton = window.location.search.indexOf(panel.id) !== -1;\r\n    }\r\n\r\n    if (showPanelButton) {\r\n      this.controlButton = $('<a role=\"button\" class=\"button group\" href=\"?' + name + '\">' + panel.label + '</a>');\r\n      this.updateAriaState();\r\n\r\n      this.controlButton.on('click touchstart', function () {\r\n        panel.toggle();\r\n        return false;\r\n      });\r\n      this.controlButton.appendTo('#panels');\r\n    }\r\n\r\n    $panel.focus(function () {\r\n      panel.focus();\r\n    });\r\n    if (!jsbin.mobile) {\r\n      $panel.add(this.$el.find('.label')).click(function () {\r\n        panel.focus();\r\n      });\r\n    }\r\n  };\r\n\r\n  Panel.order = 0;\r\n\r\n  Panel.prototype = {\r\n    virgin: true,\r\n    visible: false,\r\n    updateAriaState: function updateAriaState() {\r\n      this.controlButton.attr('aria-label', this.label + ' Panel: ' + (this.visible ? 'Active' : 'Inactive'));\r\n    },\r\n    show: function show(x) {\r\n      hideOpen();\r\n      if (this.visible) {\r\n        return;\r\n      }\r\n      $document.trigger('history:close');\r\n      // check to see if there's a panel to the left.\r\n      // if there is, take it's size/2 and make this our\r\n      // width\r\n      var panel = this,\r\n          panelCount = panel.$el.find('.panel').length;\r\n\r\n      analytics.showPanel(panel.id);\r\n\r\n      if (jsbin.mobile) {\r\n        panels.hideAll(true);\r\n      }\r\n\r\n      if (panel.splitter.length) {\r\n        if (panelCount === 0 || panelCount > 1) {\r\n          var $panel = $('.panel.' + panel.id).show();\r\n          // $panel.next().show(); // should be the splitter...\r\n          $panel.closest('.panelwrapper').show();\r\n        } else {\r\n          panel.$el.show();\r\n        }\r\n        panel.splitter.show();\r\n      } else {\r\n        panel.$el.show();\r\n      }\r\n\r\n      jsbin.$body.addClass('panelsVisible');\r\n\r\n      if (panel.settings.show) {\r\n        panel.settings.show.call(panel, true);\r\n      }\r\n      panel.controlButton.addClass('active');\r\n      panel.visible = true;\r\n      this.updateAriaState();\r\n\r\n\r\n      // if the textarea is in focus AND we're mobile AND the keyboard is up\r\n      if (jsbin.mobile && window.matchMedia && window.matchMedia('(max-height: 410px) and (max-width: 640px)').matches) {\r\n        if (panel.editor) panel.editor.focus();\r\n      }\r\n\r\n      if (jsbin.mobile) {\r\n        panel.focus();\r\n        panel.trigger('show');\r\n        return;\r\n      }\r\n\r\n      // update the splitter - but do it on the next tick\r\n      // required to allow the splitter to see it's visible first\r\n      setTimeout(function () {\r\n        if (userResizeable) {\r\n          if (x !== undefined) {\r\n            panel.splitter.trigger('init', x);\r\n          } else {\r\n            panel.distribute();\r\n          }\r\n        }\r\n        if (panel.editor) {\r\n          // populate the panel for the first time\r\n          if (panel.virgin) {\r\n            var top = panel.$el.find('.label').outerHeight();\r\n            top += 8;\r\n\r\n            if (!jsbin.mobile) {\r\n              $(panel.editor.scroller).find('.CodeMirror-lines').css('padding-top', top);\r\n            }\r\n\r\n            populateEditor(panel, panel.name);\r\n          }\r\n          if (!panel.virgin || coder.editors.panels.ready) {\r\n            panel.editor.focus();\r\n            panel.focus();\r\n          }\r\n          if (panel.virgin) {\r\n            if (panel.settings.init) {\r\n              setTimeout(function () {\r\n                panel.settings.init.call(panel);\r\n              }, 10);\r\n            }\r\n          }\r\n        } else {\r\n          panel.focus();\r\n        }\r\n        // update all splitter positions\r\n        $document.trigger('sizeeditors');\r\n\r\n        panel.trigger('show');\r\n\r\n        panel.virgin = false;\r\n      }, 0);\r\n\r\n      // TODO save which panels are visible in their profile - but check whether it's their code\r\n    },\r\n    hide: function (fromShow) {\r\n      var panel = this;\r\n      // panel.$el.hide();\r\n      panel.visible = false;\r\n      this.updateAriaState();\r\n\r\n      if (!fromShow) {\r\n        analytics.hidePanel(panel.id);\r\n      } else if (panel.editor) {\r\n        getRenderedCode[panel.id] = getRenderedCode.render(panel.id);\r\n      }\r\n\r\n      // update all splitter positions\r\n      // LOGIC: when you go to hide, you need to check if there's\r\n      // other panels inside the panel wrapper - if there are\r\n      // hide the nested panel and any previous visible splitter\r\n      // if there's only one - then hide the whole thing.\r\n      // if (panel.splitter.length) {\r\n      var panelCount = panel.$el.find('.panel').length;\r\n      if (panelCount === 0 || panelCount > 1) {\r\n        var $panel = $('.panel.' + panel.id).hide();\r\n        $panel.prev().hide(); // hide the splitter if there is one\r\n\r\n        // TODO trigger a distribute horizontally\r\n        if ($panel.closest('.panelwrapper').find('.panel:visible').length === 0) {\r\n          $panel.closest('.panelwrapper').hide();\r\n          // panel.splitter.hide();\r\n          // TODO FIXME\r\n        }\r\n      } else {\r\n        panel.$el.hide();\r\n        panel.splitter.hide();\r\n      }\r\n\r\n\r\n      if (panel.editor) {\r\n        panel.controlButton.toggleClass('hasContent', !!this.getCode().trim().length);\r\n      }\r\n\r\n      panel.controlButton.removeClass('active');\r\n\r\n      if (panel.settings.hide) {\r\n        panel.settings.hide.call(panel, true);\r\n      }\r\n\r\n      var visible = coder.editors.panels.getVisible();\r\n      if (visible.length) {\r\n        coder.editors.panels.focused = visible[0];\r\n        if (coder.editors.panels.focused.editor) {\r\n          coder.editors.panels.focused.editor.focus();\r\n        } else {\r\n          coder.editors.panels.focused.$el.focus();\r\n        }\r\n        coder.editors.panels.focused.focus();\r\n      }\r\n\r\n      if (!fromShow && jsbin.mobile && visible.length === 0) {\r\n        $document.trigger('history:load');\r\n        $('#history').show();\r\n        setTimeout(function () {\r\n          $body.removeClass('panelsVisible');\r\n        }, 100); // 100 is on purpose to add to the effect of the reveal\r\n      }\r\n\r\n      panel.trigger('hide');\r\n\r\n      if (fromShow) {\r\n        return;\r\n      }\r\n\r\n      panel.distribute();\r\n      $document.trigger('sizeeditors');\r\n\r\n      // note: the history:open does first check whether there's an open panels\r\n      // and if there are, it won't show the history, it'll just ignore the event\r\n      $document.trigger('history:open');\r\n    },\r\n    toggle: function () {\r\n      (this)[this.visible ? 'hide' : 'show']();\r\n    },\r\n    getCode: function () {\r\n      if (this.editor) {\r\n        badChars.lastIndex = 0;\r\n        return this.editor.getCode().replace(badChars, '');\r\n      }\r\n    },\r\n    setCode: function (content) {\r\n      if (this.editor) {\r\n        if (content === undefined) {\r\n          content = '';\r\n        }\r\n        this.controlButton.toggleClass('hasContent', !!content.trim().length);\r\n        this.codeSet = true;\r\n        this.editor.setCode(content.replace(badChars, ''));\r\n      }\r\n    },\r\n    codeSet: false,\r\n    blur: function () {\r\n      this.$panel.addClass('blur');\r\n    },\r\n    focus: function () {\r\n      this.$panel.removeClass('blur');\r\n      coder.editors.panels.focus(this);\r\n    },\r\n    render: function () {\r\n      'use strict';\r\n      var args = [].slice.call(arguments);\r\n      var panel = this;\r\n      return new Promise(function (resolve, reject) {\r\n        if (panel.editor) {\r\n          panel.processor(panel.getCode()).then(resolve, reject);\r\n        } else if (panel.visible && panel.settings.render) {\r\n          if (coder.editors.panels.ready) {\r\n            panel.settings.render.apply(panel, args);\r\n          }\r\n          resolve();\r\n        }\r\n      });\r\n    },\r\n    init: function () {\r\n      if (this.settings.init) this.settings.init.call(this);\r\n    },\r\n    _setupEditor: function () {\r\n      var focusedPanel = store.sessionStorage.getItem('panel') || jsbin.settings.focusedPanel,\r\n          panel = this,\r\n          editor = panel.editor;\r\n\r\n      // overhang from CodeMirror1\r\n      editor.setCode = function (str) {\r\n        //Cannot call method 'chunkSize' of undefined\r\n        try {\r\n          editor.setValue(str);\r\n        } catch(err) {\r\n          // console.error(panel.id, err);\r\n        }\r\n      };\r\n\r\n\r\n      editor.getCode = function () {\r\n        return editor.getValue();\r\n      };\r\n\r\n      editor.currentLine = function () {\r\n        var pos = editor.getCursor();\r\n        return pos.line;\r\n      };\r\n\r\n      // editor.setOption('onKeyEvent', keycontrol);\r\n      // editor.setOption('onFocus', function () {\r\n        // panel.$el.trigger('focus');\r\n      // });\r\n\r\n      // This prevents the browser from jumping\r\n      if (jsbin.embed) {\r\n        editor._focus = editor.focus;\r\n        editor.focus = function () {\r\n          // console.log('ignoring manual call');\r\n        };\r\n      }\r\n\r\n      editor.id = panel.name;\r\n\r\n      editor.win = editor.getWrapperElement();\r\n      editor.scroller = $(editor.getScrollerElement());\r\n\r\n      var $label = panel.$el.find('.label');\r\n      if (document.body.className.indexOf('ie6') === -1 && $label.length) {\r\n        editor.on('scroll', function (event) {\r\n          var scrollInfo = editor.getScrollInfo();\r\n          if (scrollInfo.top > 10) {\r\n            $label.stop().animate({ opacity: 0 }, 20, function () {\r\n              $(this).hide();\r\n            });\r\n          } else {\r\n            $label.show().stop().animate({ opacity: 1 }, 150);\r\n          }\r\n        });\r\n      }\r\n\r\n      var $error = null;\r\n      $document.bind('sizeeditors', function () {\r\n        if (panel.visible) {\r\n          var height = panel.editor.scroller.closest('.panel').outerHeight();\r\n          var offset = 0;\r\n          $error = panel.$el.find('details');\r\n          offset += ($error.filter(':visible').height() || 0);\r\n\r\n          if (!jsbin.lameEditor) {\r\n            editor.scroller.height(height - offset);\r\n          }\r\n          try { editor.refresh(); } catch (e) {}\r\n\r\n          setTimeout(function () {\r\n            $source[0].style.paddingLeft = '1px';\r\n            setTimeout(function () {\r\n              $source[0].style.paddingLeft = '0';\r\n            }, 0);\r\n          }, 0);\r\n        }\r\n      });\r\n\r\n      // required because the populate looks at the height, and at\r\n      // this point in the code, the editor isn't visible, the browser\r\n      // needs one more tick and it'll be there.\r\n      setTimeout(function () {\r\n        // if the panel isn't visible this only has the effect of putting\r\n        // the code in the textarea (though probably costs us a lot more)\r\n        // it has to be re-populated upon show for the first time because\r\n        // it appears that CM2 uses the visible height to work out what\r\n        // should be shown.\r\n        panel.ready = true;\r\n        populateEditor(panel, panel.name);\r\n\r\n        if (focusedPanel == panel.name) {\r\n          // another fracking timeout to avoid conflict with other panels firing up\r\n          setTimeout(function () {\r\n            panel.focus();\r\n            if (panel.visible && !jsbin.mobile && !jsbin.tablet) {\r\n              editor.focus();\r\n\r\n              var code = editor.getCode().split('\\n'),\r\n                  blank = null,\r\n                  i = 0;\r\n\r\n              for (; i < code.length; i++) {\r\n                if (blank === null && code[i].trim() === '') {\r\n                  blank = i;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              editor.setCursor({ line: (store.sessionStorage.getItem('line') || blank || 0) * 1, ch: (store.sessionStorage.getItem('character') || 0) * 1 });\r\n            }\r\n          }, 110); // This is totally arbitrary\r\n        }\r\n      }, 0);\r\n    },\r\n    populateEditor: function () {\r\n      populateEditor(this, this.name);\r\n    },\r\n\r\n    // events\r\n    on: function (event, fn) {\r\n      (this._eventHandlers[event] = this._eventHandlers[event] || []).push(fn);\r\n      return this;\r\n    },\r\n\r\n    trigger: function (event) {\r\n      var args = [].slice.call(arguments, 1);\r\n      args.unshift({ type: event });\r\n      for (var list = this._eventHandlers[event], i = 0; list && list[i];) {\r\n        list[i++].apply(this, args);\r\n      }\r\n      return this;\r\n    }\r\n  };\r\n\r\n  function populateEditor(editor, panel) {\r\n    if (!editor.codeSet) {\r\n      // populate - should eventually use: session, saved data, local storage\r\n      var cached = store.sessionStorage.getItem('jsbin.content.' + panel), // session code\r\n          saved = jsbin.embed ? null : store.localStorage.getItem('saved-' + panel), // user template\r\n          sessionURL = store.sessionStorage.getItem('url'),\r\n          changed = false;\r\n\r\n      // if we clone the bin, there will be a checksum on the state object\r\n      // which means we happily have write access to the bin\r\n      if (sessionURL !== jsbin.getURL() && !jsbin.state.checksum) {\r\n        // nuke the live saving checksum\r\n        store.sessionStorage.removeItem('checksum');\r\n        jsbin.saveChecksum = false;\r\n      }\r\n\r\n      if (template && cached == template[panel]) { // restored from original saved\r\n        editor.setCode(cached);\r\n      } else if (cached && sessionURL == jsbin.getURL() && sessionURL !== jsbin.root) { // try to restore the session first - only if it matches this url\r\n        editor.setCode(cached);\r\n        // tell the document that it's currently being edited, but check that it doesn't match the saved template\r\n        // because sessionStorage gets set on a reload\r\n        changed = cached != saved && cached != template[panel];\r\n      } else if (!template.post && saved !== null && !/(edit|embed)$/.test(window.location) && !window.location.search) { // then their saved preference\r\n        editor.setCode(saved);\r\n        var processor = JSON.parse(store.localStorage.getItem('saved-processors') || '{}')[panel];\r\n        if (processor) {\r\n          jsbin.processors.set(coder.editors.panels.named[panel], processor);\r\n        }\r\n      } else { // otherwise fall back on the JS Bin default\r\n        editor.setCode(template[panel]);\r\n      }\r\n\r\n      if (editor.editor && editor.editor.clearHistory) {\r\n        editor.editor.clearHistory();\r\n      }\r\n\r\n    } else {\r\n      // this means it was set via the url\r\n      changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n      $document.trigger('codeChange', [ { revert: false, onload: true } ]);\r\n    }\r\n  }\r\n\r\n\r\n  // moved from processors/processor.js\r\n\r\n  processors.set = function (panel, processorName, callback) {\r\n    var panelId = panel.id;;\r\n\r\n    if (!jsbin.state.processors) {\r\n      jsbin.state.processors = {};\r\n    }\r\n\r\n    var cmMode = processorName ? editorModes[processorName] || editorModes[panelId] : editorModes[panelId];\r\n\r\n    // For JSX, use the plain JavaScript mode but disable smart indentation\r\n    // because it doesn't work properly\r\n    var smartIndent = processorName !== 'jsx';\r\n\r\n    if (!panel) { return; }\r\n\r\n    panel.trigger('processor', processorName || 'none');\r\n    if (processorName && processors[processorName]) {\r\n      jsbin.state.processors[panelId] = processorName;\r\n      panel.processor = processors[processorName](function () {\r\n        // processor is ready\r\n        panel.editor.setOption('mode', cmMode);\r\n        panel.editor.setOption('smartIndent', smartIndent);\r\n        $('div.processorSelector')/*$processorSelectors*/.find('a').trigger('select', [processorName]);\r\n        if (callback) { callback(); }\r\n      });\r\n    } else {\r\n      // remove the preprocessor\r\n      panel.editor.setOption('mode', cmMode);\r\n      panel.editor.setOption('smartIndent', smartIndent);\r\n\r\n      panel.processor = processors.defaultProcessor;\r\n      // delete jsbin.state.processors[panelId];\r\n      jsbin.state.processors[panelId] = panelId;\r\n      delete panel.type;\r\n    }\r\n\r\n    // linting\r\n    var mmMode = cmMode;\r\n    if (cmMode === 'javascript') {\r\n      mmMode = 'js';\r\n    }\r\n    if (cmMode === 'htmlmixed') {\r\n      mmMode = 'html';\r\n    }\r\n    var isHint = panel.editor.getOption('lint');\r\n    if (isHint) {\r\n      panel.editor.lintStop();\r\n    }\r\n    if (jsbin.settings[mmMode + 'hint']) {\r\n      panel.editor.setOption('mode', cmMode);\r\n      if (typeof hintingDone !== 'undefined') {\r\n        panel.editor.setOption('mode', cmMode);\r\n        hintingDone(panel.editor);\r\n      }\r\n    }\r\n  };\r\n\r\n  return coder.editors.Panel = Panel;\r\n});"]}