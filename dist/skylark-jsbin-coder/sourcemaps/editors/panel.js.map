{"version":3,"sources":["editors/panel.js"],"names":["define","$","store","jsbin","coder","CodeMirror","$document","document","$source","userResizeable","hasClass","editorModes","html","javascript","css","typescript","markdown","coffeescript","livescript","jsx","less","sass","scss","processing","jade","clojurescript","badChars","RegExp","settings","editor","tabMode","keyMap","basic","Tab","undefined","commands","autocomplete","cm","snippets","Pass","simpleHint","hint","indexOf","options","mode","anyword","oldCodeMirror","mobile","Panel","name","panel","this","$panel","cmSettings","panelLanguage","$panelwrapper","id","data","$el","detach","appendTo","parent","hide","el","getElementById","order","label","_eventHandlers","on","panels","updateQuery","nosplitter","parserfile","readOnly","state","embed","dragDrop","lineWrapping","theme","highlightLine","extend","extraKeys","syntax","profile","tabSize","parseInt","indentUnit","fromTextArea","window","location","hash","getHighlightLines","changeObj","saveDisabled","trigger","panelId","revert","origin","focus","cmd","browser","platform","map","toggleComment","addKeyMap","_setupEditor","is","splitter","removeClass","processors","set","processor","str","Promise","resolve","beforeRender","bind","proxy","ready","controlButton","updateAriaState","toggle","add","find","click","populateEditor","codeSet","changed","cached","sessionStorage","getItem","saved","localStorage","sessionURL","getURL","checksum","removeItem","saveChecksum","template","setCode","root","post","test","search","JSON","parse","clearHistory","onload","prototype","virgin","visible","attr","show","x","hideOpen","panelCount","length","analytics","showPanel","hideAll","closest","$body","addClass","call","matchMedia","matches","setTimeout","distribute","top","outerHeight","scroller","init","fromShow","getRenderedCode","render","hidePanel","prev","toggleClass","getCode","trim","getVisible","focused","lastIndex","replace","content","blur","args","slice","arguments","reject","then","apply","focusedPanel","setValue","err","getValue","currentLine","getCursor","line","_focus","win","getWrapperElement","getScrollerElement","$label","body","className","event","getScrollInfo","stop","animate","opacity","height","offset","filter","lameEditor","refresh","e","style","paddingLeft","tablet","code","split","blank","i","setCursor","ch","fn","push","unshift","type","list","editors","console","$panelButtons","$processorSelectors","each","getAttribute","originalLabel","text","named","$panelButton","preventDefault","target","substring","labelData","reset","source","value","$this","processorName","callback","cmMode","smartIndent","setOption","defaultProcessor","mmMode","getOption","lintStop","hintingDone"],"mappings":"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","file":"../../editors/panel.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"skylark-jsbin-base/storage\",\r\n   \"../jsbin\",\r\n   \"../coder\",\r\n  \"./codemirror\",\r\n  \"./snippets.cm\"\r\n],function ($,store,jsbin,coder,CodeMirror) {\r\n  /*globals $, CodeMirror, jsbin, jshintEnabled, */\r\n  var $document = $(document),\r\n      $source = $('#source'),\r\n      userResizeable = !$('html').hasClass('layout');\r\n\r\n  var editorModes = {\r\n    html: 'htmlmixed',\r\n    javascript: 'javascript',\r\n    css: 'css',\r\n    typescript: 'javascript',\r\n    markdown: 'markdown',\r\n    coffeescript: 'coffeescript',\r\n    livescript: 'text/x-livescript',\r\n    jsx: 'javascript',\r\n    less: 'text/x-less',\r\n    sass: 'text/x-sass',\r\n    scss: 'text/x-scss',\r\n    processing: 'text/x-csrc',\r\n    jade: 'text/x-jade',\r\n    clojurescript: 'clojure'\r\n  };\r\n\r\n  var badChars = new RegExp('[\\u200B\\u0080-\\u00a0]', 'g');\r\n\r\n  if (jsbin.settings.editor.tabMode === 'default') {\r\n    CodeMirror.keyMap.basic.Tab = undefined;\r\n  } else if (jsbin.settings.editor.tabMode !== 'classic') {\r\n    CodeMirror.keyMap.basic.Tab = 'indentMore';\r\n  }\r\n\r\n  if (!CodeMirror.commands) {\r\n    CodeMirror.commands = {};\r\n  }\r\n\r\n  // Save a reference to this autocomplete function to use it when Tern scripts\r\n  // are loaded but not used, since they will automatically overwrite the\r\n  // CodeMirror autocomplete function with CodeMirror.showHint\r\n  var simpleJsHint = function(cm) {\r\n    if (CodeMirror.snippets(cm) === CodeMirror.Pass) {\r\n      return CodeMirror.simpleHint(cm, CodeMirror.hint.javascript);\r\n    }\r\n  };\r\n\r\n  CodeMirror.commands.autocomplete = simpleJsHint;\r\n\r\n  CodeMirror.commands.snippets = function (cm) {\r\n    'use strict';\r\n    if (['htmlmixed', 'javascript', 'css', editorModes['less'], editorModes['sass'], editorModes['scss']].indexOf(cm.options.mode) === -1) {\r\n      return CodeMirror.simpleHint(cm, CodeMirror.hint.anyword);\r\n    } else if (oldCodeMirror) {\r\n      return oldCodeMirror.snippets(cm);\r\n    } else if (!jsbin.mobile) {\r\n      return CodeMirror.snippets(cm);\r\n    }\r\n  };\r\n\r\n  var Panel = function (name, settings) {\r\n    'use strict';\r\n    var panel = this,\r\n        showPanelButton = true,\r\n        $panel = null,\r\n        splitterSettings = {},\r\n        cmSettings = {},\r\n        panelLanguage = name,\r\n        $panelwrapper = $('<div class=\"stretch panelwrapper\"></div>');\r\n\r\n    panel.settings = settings = settings || {};\r\n    panel.id = panel.name = name;\r\n    $panel = $('.panel.' + name);\r\n    $panel.data('name', name);\r\n    panel.$el = $panel.detach();\r\n    panel.$el.appendTo($panelwrapper);\r\n    $panelwrapper.appendTo($source);\r\n    panel.$panel = panel.$el;\r\n    panel.$el = panel.$el.parent().hide();\r\n    panel.el = document.getElementById(name);\r\n    panel.order = ++Panel.order;\r\n\r\n    panel.label = (settings.label || name);\r\n\r\n    panel.$el.data('panel', panel);\r\n\r\n    this._eventHandlers = {};\r\n\r\n    panel.on('show', panels.updateQuery);\r\n    panel.on('hide', panels.updateQuery);\r\n\r\n    // keyboard shortcut (set in keyboardcontrol.js)\r\n    // panelShortcuts[panelShortcuts.start + panel.order] = panel.id; //TODO:\r\n\r\n    if (panel.order === 1) {\r\n      settings.nosplitter = true;\r\n    }\r\n\r\n    if (settings.editor) {\r\n      cmSettings = {\r\n        parserfile: [],\r\n        readOnly: jsbin.state.embed ? 'nocursor' : false,\r\n        dragDrop: false, // we handle it ourselves\r\n        mode: editorModes[panelLanguage],\r\n        lineWrapping: false,\r\n        // gutters: ['line-highlight'],\r\n        theme: jsbin.settings.theme || 'jsbin',\r\n        highlightLine: true\r\n      };\r\n\r\n      $.extend(cmSettings, jsbin.settings.editor || {});\r\n\r\n      cmSettings.extraKeys = {};\r\n\r\n      // only the js panel for now, I'd like this to work in\r\n      // the HTML panel too, but only when you were in JS scope\r\n      if (name === 'javascript') {\r\n        cmSettings.extraKeys.Tab = 'autocomplete';\r\n      } else {\r\n        cmSettings.extraKeys.Tab = 'snippets';\r\n      }\r\n\r\n\r\n      if (name === 'html') {\r\n        // some emmet \"stuff\" - TODO decide whether this is needed still...\r\n        $.extend(cmSettings, {\r\n          syntax: name, // define Zen Coding syntax\r\n          profile: name, // define Zen Coding output profile\r\n        });\r\n      }\r\n\r\n      // make sure tabSize and indentUnit are numbers\r\n      if (typeof cmSettings.tabSize === 'string') {\r\n        cmSettings.tabSize = parseInt(cmSettings.tabSize, 10) || 2;\r\n      }\r\n      if (typeof cmSettings.indentUnit === 'string') {\r\n        cmSettings.indentUnit = parseInt(cmSettings.indentUnit, 10) || 2;\r\n      }\r\n\r\n      panel.editor = CodeMirror.fromTextArea(panel.el, cmSettings);\r\n\r\n      ///if (name === 'html' || name === 'css') {\r\n      ///  delete emmetCodeMirror.defaultKeymap['Cmd-D'];\r\n      ///  delete emmetCodeMirror.defaultKeymap['Ctrl-D'];\r\n      ///  emmetCodeMirror(panel.editor);\r\n      ///}\r\n\r\n      panel.editor.on('highlightLines', function () {\r\n        window.location.hash = panels.getHighlightLines();\r\n      });\r\n\r\n      // Bind events using CM3 syntax\r\n      panel.editor.on('change', function codeChange(cm, changeObj) {\r\n        if (jsbin.saveDisabled) {\r\n          $document.trigger('codeChange.live', [{ panelId: panel.id, revert: true, origin: changeObj.origin }]);\r\n        } else {\r\n          $document.trigger('codeChange', [{ panelId: panel.id, revert: true, origin: changeObj.origin }]);\r\n        }\r\n        return true;\r\n      });\r\n\r\n      panel.editor.on('focus', function () {\r\n        panel.focus();\r\n      });\r\n\r\n      // Restore keymaps taken by emmet but that we need for other functionalities\r\n      if (name === 'javascript') {\r\n        var cmd = $.browser.platform === 'mac' ? 'Cmd' : 'Ctrl';\r\n        var map = {};\r\n        map[cmd + '-D'] = 'deleteLine';\r\n        map[cmd + '-/'] = function(cm) { CodeMirror.commands.toggleComment(cm); };\r\n        map.name = 'noEmmet';\r\n        panel.editor.addKeyMap(map);\r\n      }\r\n\r\n      panel._setupEditor(panel.editor, name);\r\n    }\r\n\r\n    if ($('html').is('.layout')) {\r\n      panel.splitter = $();\r\n      panel.$el.removeClass('stretch');\r\n    } else if (!settings.nosplitter) {\r\n      panel.splitter = panel.$el.splitter(splitterSettings).data('splitter');\r\n      panel.splitter.hide();\r\n    } else {\r\n      // create a fake splitter to let the rest of the code work\r\n      panel.splitter = $();\r\n    }\r\n\r\n    if (jsbin.state.processors && jsbin.state.processors[name]) {\r\n      panelLanguage = jsbin.state.processors[name];\r\n      jsbin.processors.set(panel, jsbin.state.processors[name]);\r\n    } else if (settings.processor) { // FIXME is this even used?\r\n      panelLanguage = settings.processors[settings.processor];\r\n      jsbin.processors.set(panel, settings.processor);\r\n    } else if (processors[panel.id]) {\r\n      jsbin.processors.set(panel, panel.id);\r\n    } else {\r\n      // this is just a dummy function for console & output...which makes no sense...\r\n      panel.processor = function (str) {\r\n        return new Promise(function (resolve) {\r\n          resolve(str);\r\n        });\r\n      };\r\n\r\n    }\r\n\r\n    if (settings.beforeRender) {\r\n      $document.bind('render', $.proxy(settings.beforeRender, panel));\r\n    }\r\n\r\n    if (!settings.editor) {\r\n      panel.ready = true;\r\n    }\r\n\r\n    // append panel to controls\r\n    if (jsbin.state.embed) {\r\n      // showPanelButton = window.location.search.indexOf(panel.id) !== -1;\r\n    }\r\n\r\n    if (showPanelButton) {\r\n      this.controlButton = $('<a role=\"button\" class=\"button group\" href=\"?' + name + '\">' + panel.label + '</a>');\r\n      this.updateAriaState();\r\n\r\n      this.controlButton.on('click touchstart', function () {\r\n        panel.toggle();\r\n        return false;\r\n      });\r\n      this.controlButton.appendTo('#panels');\r\n    }\r\n\r\n    $panel.focus(function () {\r\n      panel.focus();\r\n    });\r\n    if (!jsbin.mobile) {\r\n      $panel.add(this.$el.find('.label')).click(function () {\r\n        panel.focus();\r\n      });\r\n    }\r\n  };\r\n\r\n  Panel.order = 0;\r\n\r\n  Panel.prototype = {\r\n    virgin: true,\r\n    visible: false,\r\n    updateAriaState: function updateAriaState() {\r\n      this.controlButton.attr('aria-label', this.label + ' Panel: ' + (this.visible ? 'Active' : 'Inactive'));\r\n    },\r\n    show: function show(x) {\r\n      hideOpen();\r\n      if (this.visible) {\r\n        return;\r\n      }\r\n      $document.trigger('history:close');\r\n      // check to see if there's a panel to the left.\r\n      // if there is, take it's size/2 and make this our\r\n      // width\r\n      var panel = this,\r\n          panelCount = panel.$el.find('.panel').length;\r\n\r\n      analytics.showPanel(panel.id);\r\n\r\n      if (jsbin.mobile) {\r\n        panels.hideAll(true);\r\n      }\r\n\r\n      if (panel.splitter.length) {\r\n        if (panelCount === 0 || panelCount > 1) {\r\n          var $panel = $('.panel.' + panel.id).show();\r\n          // $panel.next().show(); // should be the splitter...\r\n          $panel.closest('.panelwrapper').show();\r\n        } else {\r\n          panel.$el.show();\r\n        }\r\n        panel.splitter.show();\r\n      } else {\r\n        panel.$el.show();\r\n      }\r\n\r\n      $body.addClass('panelsVisible');\r\n\r\n      if (panel.settings.show) {\r\n        panel.settings.show.call(panel, true);\r\n      }\r\n      panel.controlButton.addClass('active');\r\n      panel.visible = true;\r\n      this.updateAriaState();\r\n\r\n\r\n      // if the textarea is in focus AND we're mobile AND the keyboard is up\r\n      if (jsbin.mobile && window.matchMedia && window.matchMedia('(max-height: 410px) and (max-width: 640px)').matches) {\r\n        if (panel.editor) panel.editor.focus();\r\n      }\r\n\r\n      if (jsbin.mobile) {\r\n        panel.focus();\r\n        panel.trigger('show');\r\n        return;\r\n      }\r\n\r\n      // update the splitter - but do it on the next tick\r\n      // required to allow the splitter to see it's visible first\r\n      setTimeout(function () {\r\n        if (userResizeable) {\r\n          if (x !== undefined) {\r\n            panel.splitter.trigger('init', x);\r\n          } else {\r\n            panel.distribute();\r\n          }\r\n        }\r\n        if (panel.editor) {\r\n          // populate the panel for the first time\r\n          if (panel.virgin) {\r\n            var top = panel.$el.find('.label').outerHeight();\r\n            top += 8;\r\n\r\n            if (!jsbin.mobile) {\r\n              $(panel.editor.scroller).find('.CodeMirror-lines').css('padding-top', top);\r\n            }\r\n\r\n            populateEditor(panel, panel.name);\r\n          }\r\n          if (!panel.virgin || jsbin.panels.ready) {\r\n            panel.editor.focus();\r\n            panel.focus();\r\n          }\r\n          if (panel.virgin) {\r\n            if (panel.settings.init) {\r\n              setTimeout(function () {\r\n                panel.settings.init.call(panel);\r\n              }, 10);\r\n            }\r\n          }\r\n        } else {\r\n          panel.focus();\r\n        }\r\n        // update all splitter positions\r\n        $document.trigger('sizeeditors');\r\n\r\n        panel.trigger('show');\r\n\r\n        panel.virgin = false;\r\n      }, 0);\r\n\r\n      // TODO save which panels are visible in their profile - but check whether it's their code\r\n    },\r\n    hide: function (fromShow) {\r\n      var panel = this;\r\n      // panel.$el.hide();\r\n      panel.visible = false;\r\n      this.updateAriaState();\r\n\r\n      if (!fromShow) {\r\n        analytics.hidePanel(panel.id);\r\n      } else if (panel.editor) {\r\n        getRenderedCode[panel.id] = getRenderedCode.render(panel.id);\r\n      }\r\n\r\n      // update all splitter positions\r\n      // LOGIC: when you go to hide, you need to check if there's\r\n      // other panels inside the panel wrapper - if there are\r\n      // hide the nested panel and any previous visible splitter\r\n      // if there's only one - then hide the whole thing.\r\n      // if (panel.splitter.length) {\r\n      var panelCount = panel.$el.find('.panel').length;\r\n      if (panelCount === 0 || panelCount > 1) {\r\n        var $panel = $('.panel.' + panel.id).hide();\r\n        $panel.prev().hide(); // hide the splitter if there is one\r\n\r\n        // TODO trigger a distribute horizontally\r\n        if ($panel.closest('.panelwrapper').find('.panel:visible').length === 0) {\r\n          $panel.closest('.panelwrapper').hide();\r\n          // panel.splitter.hide();\r\n          // TODO FIXME\r\n        }\r\n      } else {\r\n        panel.$el.hide();\r\n        panel.splitter.hide();\r\n      }\r\n\r\n\r\n      if (panel.editor) {\r\n        panel.controlButton.toggleClass('hasContent', !!this.getCode().trim().length);\r\n      }\r\n\r\n      panel.controlButton.removeClass('active');\r\n\r\n      if (panel.settings.hide) {\r\n        panel.settings.hide.call(panel, true);\r\n      }\r\n\r\n      var visible = jsbin.panels.getVisible();\r\n      if (visible.length) {\r\n        jsbin.panels.focused = visible[0];\r\n        if (jsbin.panels.focused.editor) {\r\n          jsbin.panels.focused.editor.focus();\r\n        } else {\r\n          jsbin.panels.focused.$el.focus();\r\n        }\r\n        jsbin.panels.focused.focus();\r\n      }\r\n\r\n      if (!fromShow && jsbin.mobile && visible.length === 0) {\r\n        $document.trigger('history:load');\r\n        $('#history').show();\r\n        setTimeout(function () {\r\n          $body.removeClass('panelsVisible');\r\n        }, 100); // 100 is on purpose to add to the effect of the reveal\r\n      }\r\n\r\n      panel.trigger('hide');\r\n\r\n      if (fromShow) {\r\n        return;\r\n      }\r\n\r\n      panel.distribute();\r\n      $document.trigger('sizeeditors');\r\n\r\n      // note: the history:open does first check whether there's an open panels\r\n      // and if there are, it won't show the history, it'll just ignore the event\r\n      $document.trigger('history:open');\r\n    },\r\n    toggle: function () {\r\n      (this)[this.visible ? 'hide' : 'show']();\r\n    },\r\n    getCode: function () {\r\n      if (this.editor) {\r\n        badChars.lastIndex = 0;\r\n        return this.editor.getCode().replace(badChars, '');\r\n      }\r\n    },\r\n    setCode: function (content) {\r\n      if (this.editor) {\r\n        if (content === undefined) {\r\n          content = '';\r\n        }\r\n        this.controlButton.toggleClass('hasContent', !!content.trim().length);\r\n        this.codeSet = true;\r\n        this.editor.setCode(content.replace(badChars, ''));\r\n      }\r\n    },\r\n    codeSet: false,\r\n    blur: function () {\r\n      this.$panel.addClass('blur');\r\n    },\r\n    focus: function () {\r\n      this.$panel.removeClass('blur');\r\n      jsbin.panels.focus(this);\r\n    },\r\n    render: function () {\r\n      'use strict';\r\n      var args = [].slice.call(arguments);\r\n      var panel = this;\r\n      return new Promise(function (resolve, reject) {\r\n        if (panel.editor) {\r\n          panel.processor(panel.getCode()).then(resolve, reject);\r\n        } else if (panel.visible && panel.settings.render) {\r\n          if (jsbin.panels.ready) {\r\n            panel.settings.render.apply(panel, args);\r\n          }\r\n          resolve();\r\n        }\r\n      });\r\n    },\r\n    init: function () {\r\n      if (this.settings.init) this.settings.init.call(this);\r\n    },\r\n    _setupEditor: function () {\r\n      var focusedPanel = store.sessionStorage.getItem('panel') || jsbin.settings.focusedPanel,\r\n          panel = this,\r\n          editor = panel.editor;\r\n\r\n      // overhang from CodeMirror1\r\n      editor.setCode = function (str) {\r\n        //Cannot call method 'chunkSize' of undefined\r\n        try {\r\n          editor.setValue(str);\r\n        } catch(err) {\r\n          // console.error(panel.id, err);\r\n        }\r\n      };\r\n\r\n\r\n      editor.getCode = function () {\r\n        return editor.getValue();\r\n      };\r\n\r\n      editor.currentLine = function () {\r\n        var pos = editor.getCursor();\r\n        return pos.line;\r\n      };\r\n\r\n      // editor.setOption('onKeyEvent', keycontrol);\r\n      // editor.setOption('onFocus', function () {\r\n        // panel.$el.trigger('focus');\r\n      // });\r\n\r\n      // This prevents the browser from jumping\r\n      if (jsbin.embed) {\r\n        editor._focus = editor.focus;\r\n        editor.focus = function () {\r\n          // console.log('ignoring manual call');\r\n        };\r\n      }\r\n\r\n      editor.id = panel.name;\r\n\r\n      editor.win = editor.getWrapperElement();\r\n      editor.scroller = $(editor.getScrollerElement());\r\n\r\n      var $label = panel.$el.find('.label');\r\n      if (document.body.className.indexOf('ie6') === -1 && $label.length) {\r\n        editor.on('scroll', function (event) {\r\n          var scrollInfo = editor.getScrollInfo();\r\n          if (scrollInfo.top > 10) {\r\n            $label.stop().animate({ opacity: 0 }, 20, function () {\r\n              $(this).hide();\r\n            });\r\n          } else {\r\n            $label.show().stop().animate({ opacity: 1 }, 150);\r\n          }\r\n        });\r\n      }\r\n\r\n      var $error = null;\r\n      $document.bind('sizeeditors', function () {\r\n        if (panel.visible) {\r\n          var height = panel.editor.scroller.closest('.panel').outerHeight();\r\n          var offset = 0;\r\n          $error = panel.$el.find('details');\r\n          offset += ($error.filter(':visible').height() || 0);\r\n\r\n          if (!jsbin.lameEditor) {\r\n            editor.scroller.height(height - offset);\r\n          }\r\n          try { editor.refresh(); } catch (e) {}\r\n\r\n          setTimeout(function () {\r\n            $source[0].style.paddingLeft = '1px';\r\n            setTimeout(function () {\r\n              $source[0].style.paddingLeft = '0';\r\n            }, 0);\r\n          }, 0);\r\n        }\r\n      });\r\n\r\n      // required because the populate looks at the height, and at\r\n      // this point in the code, the editor isn't visible, the browser\r\n      // needs one more tick and it'll be there.\r\n      setTimeout(function () {\r\n        // if the panel isn't visible this only has the effect of putting\r\n        // the code in the textarea (though probably costs us a lot more)\r\n        // it has to be re-populated upon show for the first time because\r\n        // it appears that CM2 uses the visible height to work out what\r\n        // should be shown.\r\n        panel.ready = true;\r\n        populateEditor(panel, panel.name);\r\n\r\n        if (focusedPanel == panel.name) {\r\n          // another fracking timeout to avoid conflict with other panels firing up\r\n          setTimeout(function () {\r\n            panel.focus();\r\n            if (panel.visible && !jsbin.mobile && !jsbin.tablet) {\r\n              editor.focus();\r\n\r\n              var code = editor.getCode().split('\\n'),\r\n                  blank = null,\r\n                  i = 0;\r\n\r\n              for (; i < code.length; i++) {\r\n                if (blank === null && code[i].trim() === '') {\r\n                  blank = i;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              editor.setCursor({ line: (store.sessionStorage.getItem('line') || blank || 0) * 1, ch: (store.sessionStorage.getItem('character') || 0) * 1 });\r\n            }\r\n          }, 110); // This is totally arbitrary\r\n        }\r\n      }, 0);\r\n    },\r\n    populateEditor: function () {\r\n      populateEditor(this, this.name);\r\n    },\r\n\r\n    // events\r\n    on: function (event, fn) {\r\n      (this._eventHandlers[event] = this._eventHandlers[event] || []).push(fn);\r\n      return this;\r\n    },\r\n\r\n    trigger: function (event) {\r\n      var args = [].slice.call(arguments, 1);\r\n      args.unshift({ type: event });\r\n      for (var list = this._eventHandlers[event], i = 0; list && list[i];) {\r\n        list[i++].apply(this, args);\r\n      }\r\n      return this;\r\n    }\r\n  };\r\n\r\n  function populateEditor(editor, panel) {\r\n    if (!editor.codeSet) {\r\n      // populate - should eventually use: session, saved data, local storage\r\n      var cached = store.sessionStorage.getItem('jsbin.content.' + panel), // session code\r\n          saved = jsbin.embed ? null : store.localStorage.getItem('saved-' + panel), // user template\r\n          sessionURL = store.sessionStorage.getItem('url'),\r\n          changed = false;\r\n\r\n      // if we clone the bin, there will be a checksum on the state object\r\n      // which means we happily have write access to the bin\r\n      if (sessionURL !== jsbin.getURL() && !jsbin.state.checksum) {\r\n        // nuke the live saving checksum\r\n        store.sessionStorage.removeItem('checksum');\r\n        saveChecksum = false;\r\n      }\r\n\r\n      if (template && cached == template[panel]) { // restored from original saved\r\n        editor.setCode(cached);\r\n      } else if (cached && sessionURL == jsbin.getURL() && sessionURL !== jsbin.root) { // try to restore the session first - only if it matches this url\r\n        editor.setCode(cached);\r\n        // tell the document that it's currently being edited, but check that it doesn't match the saved template\r\n        // because sessionStorage gets set on a reload\r\n        changed = cached != saved && cached != template[panel];\r\n      } else if (!template.post && saved !== null && !/(edit|embed)$/.test(window.location) && !window.location.search) { // then their saved preference\r\n        editor.setCode(saved);\r\n        var processor = JSON.parse(store.localStorage.getItem('saved-processors') || '{}')[panel];\r\n        if (processor) {\r\n          jsbin.processors.set(jsbin.panels.panels[panel], processor);\r\n        }\r\n      } else { // otherwise fall back on the JS Bin default\r\n        editor.setCode(template[panel]);\r\n      }\r\n\r\n      if (editor.editor && editor.editor.clearHistory) {\r\n        editor.editor.clearHistory();\r\n      }\r\n\r\n    } else {\r\n      // this means it was set via the url\r\n      changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n      $document.trigger('codeChange', [ { revert: false, onload: true } ]);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // moved from processors/processor.js\r\n  var render = function() {\r\n    if (jsbin.panels.ready) {\r\n      editors.console.render();\r\n    }\r\n  };\r\n\r\n  var formatErrors = function(res) {\r\n    var errors = [];\r\n    var line = 0;\r\n    var ch = 0;\r\n    for (var i = 0; i < res.length; i++) {\r\n      line = res[i].line || 0;\r\n      ch = res[i].ch || 0;\r\n      errors.push({\r\n        from: CodeMirror.Pos(line, ch),\r\n        to: CodeMirror.Pos(line, ch),\r\n        message: res[i].msg,\r\n        severity : 'error'\r\n      });\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  var $panelButtons = $('#panels');\r\n\r\n  var $processorSelectors = $('div.processorSelector').each(function () {\r\n    var panelId = this.getAttribute('data-type'),\r\n        $el = $(this),\r\n        $label = $el.closest('.label').find('strong a'),\r\n        originalLabel = $label.text();\r\n\r\n    $el.find('a').click(function (e) {\r\n      var panel = jsbin.panels.named[panelId];\r\n      var $panelButton = $panelButtons.find('a[href$=\"' + panelId + '\"]');\r\n\r\n      e.preventDefault();\r\n      var target = this.hash.substring(1),\r\n          label = $(this).text(),\r\n          labelData = $(this).data('label');\r\n      if (target !== 'convert') {\r\n        $panelButton.html(labelData || label);\r\n        $label.html('<span>' + label + '</span>');\r\n        if (target === panelId) {\r\n          processors.reset(panelId);\r\n          render();\r\n        } else {\r\n          processors.set(panelId, target, render);\r\n        }\r\n      } else {\r\n        $label.text(originalLabel);\r\n        $panelButton.html(originalLabel);\r\n        panel.render().then(function (source) {\r\n          processors.reset(panelId);\r\n          panel.setCode(source);\r\n        });\r\n      }\r\n    }).bind('select', function (event, value) {\r\n      if (value === this.hash.substring(1)) {\r\n        var $panelButton = $panelButtons.find('a[href$=\"' + panelId + '\"]');\r\n        var $this = $(this);\r\n        $label.html('<span>' + $this.text() + '</span>');\r\n        $panelButton.html($this.data('label') || $this.text());\r\n      }\r\n    });\r\n  });\r\n\r\n  processors.set = function (panelId, processorName, callback) {\r\n    var panel;\r\n\r\n    // panelId can be id or instance of a panel.\r\n    // this is kinda nasty, but it allows me to set panel processors during boot\r\n    if (panelId instanceof Panel) {\r\n      panel = panelId;\r\n      panelId = panel.id;\r\n    } else {\r\n      panel = jsbin.panels.named[panelId];\r\n    }\r\n\r\n    if (!jsbin.state.processors) {\r\n      jsbin.state.processors = {};\r\n    }\r\n\r\n    var cmMode = processorName ? editorModes[processorName] || editorModes[panelId] : editorModes[panelId];\r\n\r\n    // For JSX, use the plain JavaScript mode but disable smart indentation\r\n    // because it doesn't work properly\r\n    var smartIndent = processorName !== 'jsx';\r\n\r\n    if (!panel) { return; }\r\n\r\n    panel.trigger('processor', processorName || 'none');\r\n    if (processorName && processors[processorName]) {\r\n      jsbin.state.processors[panelId] = processorName;\r\n      panel.processor = processors[processorName](function () {\r\n        // processor is ready\r\n        panel.editor.setOption('mode', cmMode);\r\n        panel.editor.setOption('smartIndent', smartIndent);\r\n        $processorSelectors.find('a').trigger('select', [processorName]);\r\n        if (callback) { callback(); }\r\n      });\r\n    } else {\r\n      // remove the preprocessor\r\n      panel.editor.setOption('mode', cmMode);\r\n      panel.editor.setOption('smartIndent', smartIndent);\r\n\r\n      panel.processor = defaultProcessor;\r\n      // delete jsbin.state.processors[panelId];\r\n      jsbin.state.processors[panelId] = panelId;\r\n      delete panel.type;\r\n    }\r\n\r\n    // linting\r\n    var mmMode = cmMode;\r\n    if (cmMode === 'javascript') {\r\n      mmMode = 'js';\r\n    }\r\n    if (cmMode === 'htmlmixed') {\r\n      mmMode = 'html';\r\n    }\r\n    var isHint = panel.editor.getOption('lint');\r\n    if (isHint) {\r\n      panel.editor.lintStop();\r\n    }\r\n    if (jsbin.settings[mmMode + 'hint']) {\r\n      panel.editor.setOption('mode', cmMode);\r\n      if (typeof hintingDone !== 'undefined') {\r\n        panel.editor.setOption('mode', cmMode);\r\n        hintingDone(panel.editor);\r\n      }\r\n    }\r\n  };\r\n\r\n  processors.reset = function (panelId) {\r\n    processors.set(panelId);\r\n  };\r\n\r\n  return coder.editors.Panel = Panel;\r\n});"]}