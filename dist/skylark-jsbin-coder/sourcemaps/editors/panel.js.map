{"version":3,"sources":["editors/panel.js"],"names":["define","$","store","jsbin","coder","CodeMirror","$document","document","$source","userResizeable","hasClass","editorModes","html","javascript","css","typescript","markdown","coffeescript","livescript","jsx","less","sass","scss","processing","jade","clojurescript","badChars","RegExp","settings","editor","tabMode","keyMap","basic","Tab","undefined","commands","autocomplete","cm","snippets","Pass","simpleHint","hint","indexOf","options","mode","anyword","oldCodeMirror","mobile","Panel","name","panel","this","$panel","cmSettings","panelLanguage","$panelwrapper","id","data","$el","detach","appendTo","parent","hide","el","getElementById","order","label","_eventHandlers","on","panels","updateQuery","panelShortcuts","start","nosplitter","parserfile","readOnly","state","embed","dragDrop","lineWrapping","theme","highlightLine","extend","extraKeys","syntax","profile","tabSize","parseInt","indentUnit","fromTextArea","emmetCodeMirror","defaultKeymap","window","location","hash","getHighlightLines","changeObj","saveDisabled","trigger","panelId","revert","origin","focus","cmd","browser","platform","map","toggleComment","addKeyMap","_setupEditor","is","splitter","removeClass","processors","set","processor","str","Promise","resolve","beforeRender","bind","proxy","ready","controlButton","updateAriaState","toggle","add","find","click","populateEditor","codeSet","changed","cached","sessionStorage","getItem","saved","localStorage","sessionURL","getURL","checksum","removeItem","saveChecksum","template","setCode","root","post","test","search","JSON","parse","clearHistory","onload","prototype","virgin","visible","attr","show","x","hideOpen","panelCount","length","analytics","showPanel","hideAll","closest","$body","addClass","call","matchMedia","matches","setTimeout","distribute","top","outerHeight","scroller","init","fromShow","getRenderedCode","render","hidePanel","prev","toggleClass","getCode","trim","getVisible","focused","lastIndex","replace","content","blur","args","slice","arguments","reject","then","apply","focusedPanel","setValue","err","getValue","currentLine","getCursor","line","_focus","win","getWrapperElement","getScrollerElement","$label","body","className","event","getScrollInfo","stop","animate","opacity","height","offset","filter","lameEditor","refresh","e","style","paddingLeft","tablet","code","split","blank","i","setCursor","ch","fn","push","unshift","type","list","editors"],"mappings":";;;;;;;AAAAA,QACE,iBACA,6BACC,WACA,WACD,eACA,iBACA,SAAUC,EAAEC,EAAMC,EAAMC,EAAMC,GAE9B,IAAIC,EAAYL,EAAEM,UACdC,EAAUP,EAAE,WACZQ,GAAkBR,EAAE,QAAQS,SAAS,UAErCC,GACFC,KAAM,YACNC,WAAY,aACZC,IAAK,MACLC,WAAY,aACZC,SAAU,WACVC,aAAc,eACdC,WAAY,oBACZC,IAAK,aACLC,KAAM,cACNC,KAAM,cACNC,KAAM,cACNC,WAAY,cACZC,KAAM,cACNC,cAAe,WAGbC,EAAW,IAAIC,OAAO,SAAyB,KAEb,YAAlCxB,EAAMyB,SAASC,OAAOC,QACxBzB,EAAW0B,OAAOC,MAAMC,SAAMC,EACa,YAAlC/B,EAAMyB,SAASC,OAAOC,UAC/BzB,EAAW0B,OAAOC,MAAMC,IAAM,cAG3B5B,EAAW8B,WACd9B,EAAW8B,aAYb9B,EAAW8B,SAASC,aAND,SAASC,GAC1B,GAAIhC,EAAWiC,SAASD,KAAQhC,EAAWkC,KACzC,OAAOlC,EAAWmC,WAAWH,EAAIhC,EAAWoC,KAAK5B,aAMrDR,EAAW8B,SAASG,SAAW,SAAUD,GACvC,aACA,OAAoI,KAA/H,YAAa,aAAc,MAAO1B,EAAkB,KAAGA,EAAkB,KAAGA,EAAkB,MAAG+B,QAAQL,EAAGM,QAAQC,MAChHvC,EAAWmC,WAAWH,EAAIhC,EAAWoC,KAAKI,SACxCC,cACFA,cAAcR,SAASD,GACpBlC,EAAM4C,YAAX,EACE1C,EAAWiC,SAASD,IAI/B,IAAIW,EAAQ,SAAUC,EAAMrB,GAC1B,aACA,IAAIsB,EAAQC,KAERC,EAAS,KAETC,KACAC,EAAgBL,EAChBM,EAAgBtD,EAAE,4CA8BtB,GA5BAiD,EAAMtB,SAAWA,EAAWA,MAC5BsB,EAAMM,GAAKN,EAAMD,KAAOA,GACxBG,EAASnD,EAAE,UAAYgD,IAChBQ,KAAK,OAAQR,GACpBC,EAAMQ,IAAMN,EAAOO,SACnBT,EAAMQ,IAAIE,SAASL,GACnBA,EAAcK,SAASpD,GACvB0C,EAAME,OAASF,EAAMQ,IACrBR,EAAMQ,IAAMR,EAAMQ,IAAIG,SAASC,OAC/BZ,EAAMa,GAAKxD,SAASyD,eAAef,GACnCC,EAAMe,QAAUjB,EAAMiB,MAEtBf,EAAMgB,MAAStC,EAASsC,OAASjB,EAEjCC,EAAMQ,IAAID,KAAK,QAASP,GAExBC,KAAKgB,kBAELjB,EAAMkB,GAAG,OAAQC,OAAOC,aACxBpB,EAAMkB,GAAG,OAAQC,OAAOC,aAGxBC,eAAeA,eAAeC,MAAQtB,EAAMe,OAASf,EAAMM,GAEvC,IAAhBN,EAAMe,QACRrC,EAAS6C,YAAa,GAGpB7C,EAASC,OAAQ,CAoEnB,GAnEAwB,GACEqB,cACAC,WAAUxE,EAAMyE,MAAMC,OAAQ,WAC9BC,UAAU,EACVlC,KAAMjC,EAAY2C,GAClByB,cAAc,EAEdC,MAAO7E,EAAMyB,SAASoD,OAAS,QAC/BC,eAAe,GAGjBhF,EAAEiF,OAAO7B,EAAYlD,EAAMyB,SAASC,YAEpCwB,EAAW8B,aAKT9B,EAAW8B,UAAUlD,IADV,eAATgB,EACyB,eAEA,WAIhB,SAATA,GAEFhD,EAAEiF,OAAO7B,GACP+B,OAAQnC,EACRoC,QAASpC,IAKqB,iBAAvBI,EAAWiC,UACpBjC,EAAWiC,QAAUC,SAASlC,EAAWiC,QAAS,KAAO,GAEtB,iBAA1BjC,EAAWmC,aACpBnC,EAAWmC,WAAaD,SAASlC,EAAWmC,WAAY,KAAO,GAGjEtC,EAAMrB,OAASxB,EAAWoF,aAAavC,EAAMa,GAAIV,GAEpC,SAATJ,GAA4B,QAATA,WACdyC,gBAAgBC,cAAc,gBAC9BD,gBAAgBC,cAAc,UACrCD,gBAAgBxC,EAAMrB,SAGxBqB,EAAMrB,OAAOuC,GAAG,iBAAkB,WAChCwB,OAAOC,SAASC,KAAOzB,OAAO0B,sBAIhC7C,EAAMrB,OAAOuC,GAAG,SAAU,SAAoB/B,EAAI2D,GAMhD,OALI7F,EAAM8F,aACR3F,EAAU4F,QAAQ,oBAAsBC,QAASjD,EAAMM,GAAI4C,QAAQ,EAAMC,OAAQL,EAAUK,UAE3F/F,EAAU4F,QAAQ,eAAiBC,QAASjD,EAAMM,GAAI4C,QAAQ,EAAMC,OAAQL,EAAUK,WAEjF,IAGTnD,EAAMrB,OAAOuC,GAAG,QAAS,WACvBlB,EAAMoD,UAIK,eAATrD,EAAuB,CACzB,IAAIsD,EAA6B,QAAvBtG,EAAEuG,QAAQC,SAAqB,MAAQ,OAC7CC,KACJA,EAAIH,EAAM,MAAQ,aAClBG,EAAIH,EAAM,MAAQ,SAASlE,GAAMhC,EAAW8B,SAASwE,cAActE,IACnEqE,EAAIzD,KAAO,UACXC,EAAMrB,OAAO+E,UAAUF,GAGzBxD,EAAM2D,aAAa3D,EAAMrB,OAAQoB,GAG/BhD,EAAE,QAAQ6G,GAAG,YACf5D,EAAM6D,SAAW9G,IACjBiD,EAAMQ,IAAIsD,YAAY,YACZpF,EAAS6C,WAKnBvB,EAAM6D,SAAW9G,KAJjBiD,EAAM6D,SAAW7D,EAAMQ,IAAIqD,aAA2BtD,KAAK,YAC3DP,EAAM6D,SAASjD,QAMb3D,EAAMyE,MAAMqC,YAAc9G,EAAMyE,MAAMqC,WAAWhE,IACnDK,EAAgBnD,EAAMyE,MAAMqC,WAAWhE,GACvC9C,EAAM8G,WAAWC,IAAIhE,EAAO/C,EAAMyE,MAAMqC,WAAWhE,KAC1CrB,EAASuF,WAClB7D,EAAgB1B,EAASqF,WAAWrF,EAASuF,WAC7ChH,EAAM8G,WAAWC,IAAIhE,EAAOtB,EAASuF,YAC5BF,WAAW/D,EAAMM,IAC1BrD,EAAM8G,WAAWC,IAAIhE,EAAOA,EAAMM,IAGlCN,EAAMiE,UAAY,SAAUC,GAC1B,OAAO,IAAIC,QAAQ,SAAUC,GAC3BA,EAAQF,MAMVxF,EAAS2F,cACXjH,EAAUkH,KAAK,SAAUvH,EAAEwH,MAAM7F,EAAS2F,aAAcrE,IAGrDtB,EAASC,SACZqB,EAAMwE,OAAQ,GAIZvH,EAAMyE,MAAMC,MAKd1B,KAAKwE,cAAgB1H,EAAE,gDAAkDgD,EAAO,KAAOC,EAAMgB,MAAQ,QACrGf,KAAKyE,kBAELzE,KAAKwE,cAAcvD,GAAG,mBAAoB,WAExC,OADAlB,EAAM2E,UACC,IAET1E,KAAKwE,cAAc/D,SAAS,WAG9BR,EAAOkD,MAAM,WACXpD,EAAMoD,UAEHnG,EAAM4C,QACTK,EAAO0E,IAAI3E,KAAKO,IAAIqE,KAAK,WAAWC,MAAM,WACxC9E,EAAMoD,WAgXZ,SAAS2B,EAAepG,EAAQqB,GAC9B,GAAKrB,EAAOqG,QAsCVC,GAAU,MAtCS,CAEnB,IAAIC,EAASlI,EAAMmI,eAAeC,QAAQ,iBAAmBpF,GACzDqF,EAAQpI,EAAM0E,MAAQ,KAAO3E,EAAMsI,aAAaF,QAAQ,SAAWpF,GACnEuF,EAAavI,EAAMmI,eAAeC,QAAQ,OAC1CH,GAAU,EAUd,GANIM,IAAetI,EAAMuI,UAAavI,EAAMyE,MAAM+D,WAEhDzI,EAAMmI,eAAeO,WAAW,YAChCC,cAAe,GAGbC,UAAYV,GAAUU,SAAS5F,GACjCrB,EAAOkH,QAAQX,QACV,GAAIA,GAAUK,GAActI,EAAMuI,UAAYD,IAAetI,EAAM6I,KACxEnH,EAAOkH,QAAQX,GAGfD,EAAUC,GAAUG,GAASH,GAAUU,SAAS5F,QAC3C,GAAK4F,SAASG,MAAkB,OAAVV,GAAmB,gBAAgBW,KAAKtD,OAAOC,WAAcD,OAAOC,SAASsD,OAOxGtH,EAAOkH,QAAQD,SAAS5F,QAPwF,CAChHrB,EAAOkH,QAAQR,GACf,IAAIpB,EAAYiC,KAAKC,MAAMnJ,EAAMsI,aAAaF,QAAQ,qBAAuB,MAAMpF,GAC/EiE,GACFhH,EAAM8G,WAAWC,IAAI/G,EAAMkE,OAAOA,OAAOnB,GAAQiE,GAMjDtF,EAAOA,QAAUA,EAAOA,OAAOyH,cACjCzH,EAAOA,OAAOyH,eAQdnB,GACF7H,EAAU4F,QAAQ,eAAkBE,QAAQ,EAAOmD,QAAQ,KAI/D,OA1ZAvG,EAAMiB,MAAQ,EAEdjB,EAAMwG,WACJC,QAAQ,EACRC,SAAS,EACT9B,gBAAiB,WACfzE,KAAKwE,cAAcgC,KAAK,aAAcxG,KAAKe,MAAQ,YAAcf,KAAKuG,QAAU,SAAW,cAE7FE,KAAM,SAAcC,GAElB,GADAC,YACI3G,KAAKuG,QAAT,CAGApJ,EAAU4F,QAAQ,iBAIlB,IAAIhD,EAAQC,KACR4G,EAAa7G,EAAMQ,IAAIqE,KAAK,UAAUiC,OAQ1C,GANAC,UAAUC,UAAUhH,EAAMM,IAEtBrD,EAAM4C,QACRsB,OAAO8F,SAAQ,GAGbjH,EAAM6D,SAASiD,OAAQ,CACzB,GAAmB,IAAfD,GAAoBA,EAAa,EACtB9J,EAAE,UAAYiD,EAAMM,IAAIoG,OAE9BQ,QAAQ,iBAAiBR,YAEhC1G,EAAMQ,IAAIkG,OAEZ1G,EAAM6D,SAAS6C,YAEf1G,EAAMQ,IAAIkG,OAkBZ,GAfAS,MAAMC,SAAS,iBAEXpH,EAAMtB,SAASgI,MACjB1G,EAAMtB,SAASgI,KAAKW,KAAKrH,GAAO,GAElCA,EAAMyE,cAAc2C,SAAS,UAC7BpH,EAAMwG,SAAU,EAChBvG,KAAKyE,kBAIDzH,EAAM4C,QAAU6C,OAAO4E,YAAc5E,OAAO4E,WAAW,8CAA8CC,SACnGvH,EAAMrB,QAAQqB,EAAMrB,OAAOyE,QAG7BnG,EAAM4C,OAGR,OAFAG,EAAMoD,aACNpD,EAAMgD,QAAQ,QAMhBwE,WAAW,WAQT,GAPIjK,SACQyB,IAAN2H,EACF3G,EAAM6D,SAASb,QAAQ,OAAQ2D,GAE/B3G,EAAMyH,cAGNzH,EAAMrB,OAAQ,CAEhB,GAAIqB,EAAMuG,OAAQ,CAChB,IAAImB,EAAM1H,EAAMQ,IAAIqE,KAAK,UAAU8C,cACnCD,GAAO,EAEFzK,EAAM4C,QACT9C,EAAEiD,EAAMrB,OAAOiJ,UAAU/C,KAAK,qBAAqBjH,IAAI,cAAe8J,GAGxE3C,EAAe/E,EAAOA,EAAMD,MAEzBC,EAAMuG,SAAUtJ,EAAMkE,OAAOqD,QAChCxE,EAAMrB,OAAOyE,QACbpD,EAAMoD,SAEJpD,EAAMuG,QACJvG,EAAMtB,SAASmJ,MACjBL,WAAW,WACTxH,EAAMtB,SAASmJ,KAAKR,KAAKrH,IACxB,SAIPA,EAAMoD,QAGRhG,EAAU4F,QAAQ,eAElBhD,EAAMgD,QAAQ,QAEdhD,EAAMuG,QAAS,GACd,KAIL3F,KAAM,SAAUkH,GACF7H,KAENuG,SAAU,EAChBvG,KAAKyE,kBAEAoD,EALO7H,KAOKtB,SACfoJ,gBARU9H,KAQYK,IAAMyH,gBAAgBC,OARlC/H,KAQ+CK,KAFzDyG,UAAUkB,UANAhI,KAMgBK,IAW5B,IAAIuG,EAjBQ5G,KAiBWO,IAAIqE,KAAK,UAAUiC,OAC1C,GAAmB,IAAfD,GAAoBA,EAAa,EAAG,CACtC,IAAI3G,EAASnD,EAAE,UAnBLkD,KAmBuBK,IAAIM,OACrCV,EAAOgI,OAAOtH,OAGwD,IAAlEV,EAAOgH,QAAQ,iBAAiBrC,KAAK,kBAAkBiC,QACzD5G,EAAOgH,QAAQ,iBAAiBtG,YAxBxBX,KA6BJO,IAAII,OA7BAX,KA8BJ4D,SAASjD,OA9BLX,KAkCFtB,QAlCEsB,KAmCJwE,cAAc0D,YAAY,eAAgBlI,KAAKmI,UAAUC,OAAOvB,QAnC5D7G,KAsCNwE,cAAcX,YAAY,UAtCpB7D,KAwCFvB,SAASkC,MAxCPX,KAyCJvB,SAASkC,KAAKyG,KAzCVpH,MAyCsB,GAGlC,IAAIuG,EAAUvJ,EAAMkE,OAAOmH,aACvB9B,EAAQM,SACV7J,EAAMkE,OAAOoH,QAAU/B,EAAQ,GAC3BvJ,EAAMkE,OAAOoH,QAAQ5J,OACvB1B,EAAMkE,OAAOoH,QAAQ5J,OAAOyE,QAE5BnG,EAAMkE,OAAOoH,QAAQ/H,IAAI4C,QAE3BnG,EAAMkE,OAAOoH,QAAQnF,UAGlB0E,GAAY7K,EAAM4C,QAA6B,IAAnB2G,EAAQM,SACvC1J,EAAU4F,QAAQ,gBAClBjG,EAAE,YAAY2J,OACdc,WAAW,WACTL,MAAMrD,YAAY,kBACjB,MA5DO7D,KA+DN+C,QAAQ,QAEV8E,IAjEQ7H,KAqENwH,aACNrK,EAAU4F,QAAQ,eAIlB5F,EAAU4F,QAAQ,kBAEpB2B,OAAQ,WACN,KAAO1E,KAAKuG,QAAU,OAAS,WAEjC4B,QAAS,WACP,GAAInI,KAAKtB,OAEP,OADAH,EAASgK,UAAY,EACdvI,KAAKtB,OAAOyJ,UAAUK,QAAQjK,EAAU,KAGnDqH,QAAS,SAAU6C,GACbzI,KAAKtB,cACSK,IAAZ0J,IACFA,EAAU,IAEZzI,KAAKwE,cAAc0D,YAAY,eAAgBO,EAAQL,OAAOvB,QAC9D7G,KAAK+E,SAAU,EACf/E,KAAKtB,OAAOkH,QAAQ6C,EAAQD,QAAQjK,EAAU,OAGlDwG,SAAS,EACT2D,KAAM,WACJ1I,KAAKC,OAAOkH,SAAS,SAEvBhE,MAAO,WACLnD,KAAKC,OAAO4D,YAAY,QACxB7G,EAAMkE,OAAOiC,MAAMnD,OAErB+H,OAAQ,WACN,aACA,IAAIY,KAAUC,MAAMxB,KAAKyB,WACrB9I,EAAQC,KACZ,OAAO,IAAIkE,QAAQ,SAAUC,EAAS2E,GAChC/I,EAAMrB,OACRqB,EAAMiE,UAAUjE,EAAMoI,WAAWY,KAAK5E,EAAS2E,GACtC/I,EAAMwG,SAAWxG,EAAMtB,SAASsJ,SACrC/K,EAAMkE,OAAOqD,OACfxE,EAAMtB,SAASsJ,OAAOiB,MAAMjJ,EAAO4I,GAErCxE,QAINyD,KAAM,WACA5H,KAAKvB,SAASmJ,MAAM5H,KAAKvB,SAASmJ,KAAKR,KAAKpH,OAElD0D,aAAc,WACZ,IAAIuF,EAAelM,EAAMmI,eAAeC,QAAQ,UAAYnI,EAAMyB,SAASwK,aACvElJ,EAAQC,KACRtB,EAASqB,EAAMrB,OAGnBA,EAAOkH,QAAU,SAAU3B,GAEzB,IACEvF,EAAOwK,SAASjF,GAChB,MAAMkF,MAMVzK,EAAOyJ,QAAU,WACf,OAAOzJ,EAAO0K,YAGhB1K,EAAO2K,YAAc,WAEnB,OADU3K,EAAO4K,YACNC,MASTvM,EAAM0E,QACRhD,EAAO8K,OAAS9K,EAAOyE,MACvBzE,EAAOyE,MAAQ,cAKjBzE,EAAO2B,GAAKN,EAAMD,KAElBpB,EAAO+K,IAAM/K,EAAOgL,oBACpBhL,EAAOiJ,SAAW7K,EAAE4B,EAAOiL,sBAE3B,IAAIC,EAAS7J,EAAMQ,IAAIqE,KAAK,WACoB,IAA5CxH,SAASyM,KAAKC,UAAUvK,QAAQ,QAAiBqK,EAAO/C,QAC1DnI,EAAOuC,GAAG,SAAU,SAAU8I,GACXrL,EAAOsL,gBACTvC,IAAM,GACnBmC,EAAOK,OAAOC,SAAUC,QAAS,GAAK,GAAI,WACxCrN,EAAEkD,MAAMW,SAGViJ,EAAOnD,OAAOwD,OAAOC,SAAUC,QAAS,GAAK,OAMnDhN,EAAUkH,KAAK,cAAe,WAC5B,GAAItE,EAAMwG,QAAS,CACjB,IAAI6D,EAASrK,EAAMrB,OAAOiJ,SAASV,QAAQ,UAAUS,cACjD2C,EAAS,EAEbA,GADStK,EAAMQ,IAAIqE,KAAK,WACN0F,OAAO,YAAYF,UAAY,EAE5CpN,EAAMuN,YACT7L,EAAOiJ,SAASyC,OAAOA,EAASC,GAElC,IAAM3L,EAAO8L,UAAa,MAAOC,IAEjClD,WAAW,WACTlK,EAAQ,GAAGqN,MAAMC,YAAc,MAC/BpD,WAAW,WACTlK,EAAQ,GAAGqN,MAAMC,YAAc,KAC9B,IACF,MAOPpD,WAAW,WAMTxH,EAAMwE,OAAQ,EACdO,EAAe/E,EAAOA,EAAMD,MAExBmJ,GAAgBlJ,EAAMD,MAExByH,WAAW,WAET,GADAxH,EAAMoD,QACFpD,EAAMwG,UAAYvJ,EAAM4C,SAAW5C,EAAM4N,OAAQ,CACnDlM,EAAOyE,QAMP,IAJA,IAAI0H,EAAOnM,EAAOyJ,UAAU2C,MAAM,MAC9BC,EAAQ,KACRC,EAAI,EAEDA,EAAIH,EAAKhE,OAAQmE,IACtB,GAAc,OAAVD,GAAqC,KAAnBF,EAAKG,GAAG5C,OAAe,CAC3C2C,EAAQC,EACR,MAIJtM,EAAOuM,WAAY1B,KAA6D,GAAtDxM,EAAMmI,eAAeC,QAAQ,SAAW4F,GAAS,GAAQG,GAAuD,GAAlDnO,EAAMmI,eAAeC,QAAQ,cAAgB,OAEtI,MAEJ,IAELL,eAAgB,WACdA,EAAe9E,KAAMA,KAAKF,OAI5BmB,GAAI,SAAU8I,EAAOoB,GAEnB,OADCnL,KAAKgB,eAAe+I,GAAS/J,KAAKgB,eAAe+I,QAAcqB,KAAKD,GAC9DnL,MAGT+C,QAAS,SAAUgH,GACjB,IAAIpB,KAAUC,MAAMxB,KAAKyB,UAAW,GACpCF,EAAK0C,SAAUC,KAAMvB,IACrB,IAAK,IAAIwB,EAAOvL,KAAKgB,eAAe+I,GAAQiB,EAAI,EAAGO,GAAQA,EAAKP,IAC9DO,EAAKP,KAAKhC,MAAMhJ,KAAM2I,GAExB,OAAO3I,OAmDJ/C,EAAMuO,QAAQ3L,MAAQA","file":"../../editors/panel.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"skylark-jsbin-base/storage\",\r\n   \"../jsbin\",\r\n   \"../coder\",\r\n  \"./codemirror\",\r\n  \"./snippets.cm\"\r\n],function ($,store,jsbin,coder,CodeMirror) {\r\n  /*globals $, CodeMirror, jsbin, jshintEnabled, */\r\n  var $document = $(document),\r\n      $source = $('#source'),\r\n      userResizeable = !$('html').hasClass('layout');\r\n\r\n  var editorModes = {\r\n    html: 'htmlmixed',\r\n    javascript: 'javascript',\r\n    css: 'css',\r\n    typescript: 'javascript',\r\n    markdown: 'markdown',\r\n    coffeescript: 'coffeescript',\r\n    livescript: 'text/x-livescript',\r\n    jsx: 'javascript',\r\n    less: 'text/x-less',\r\n    sass: 'text/x-sass',\r\n    scss: 'text/x-scss',\r\n    processing: 'text/x-csrc',\r\n    jade: 'text/x-jade',\r\n    clojurescript: 'clojure'\r\n  };\r\n\r\n  var badChars = new RegExp('[\\u200B\\u0080-\\u00a0]', 'g');\r\n\r\n  if (jsbin.settings.editor.tabMode === 'default') {\r\n    CodeMirror.keyMap.basic.Tab = undefined;\r\n  } else if (jsbin.settings.editor.tabMode !== 'classic') {\r\n    CodeMirror.keyMap.basic.Tab = 'indentMore';\r\n  }\r\n\r\n  if (!CodeMirror.commands) {\r\n    CodeMirror.commands = {};\r\n  }\r\n\r\n  // Save a reference to this autocomplete function to use it when Tern scripts\r\n  // are loaded but not used, since they will automatically overwrite the\r\n  // CodeMirror autocomplete function with CodeMirror.showHint\r\n  var simpleJsHint = function(cm) {\r\n    if (CodeMirror.snippets(cm) === CodeMirror.Pass) {\r\n      return CodeMirror.simpleHint(cm, CodeMirror.hint.javascript);\r\n    }\r\n  };\r\n\r\n  CodeMirror.commands.autocomplete = simpleJsHint;\r\n\r\n  CodeMirror.commands.snippets = function (cm) {\r\n    'use strict';\r\n    if (['htmlmixed', 'javascript', 'css', editorModes['less'], editorModes['sass'], editorModes['scss']].indexOf(cm.options.mode) === -1) {\r\n      return CodeMirror.simpleHint(cm, CodeMirror.hint.anyword);\r\n    } else if (oldCodeMirror) {\r\n      return oldCodeMirror.snippets(cm);\r\n    } else if (!jsbin.mobile) {\r\n      return CodeMirror.snippets(cm);\r\n    }\r\n  };\r\n\r\n  var Panel = function (name, settings) {\r\n    'use strict';\r\n    var panel = this,\r\n        showPanelButton = true,\r\n        $panel = null,\r\n        splitterSettings = {},\r\n        cmSettings = {},\r\n        panelLanguage = name,\r\n        $panelwrapper = $('<div class=\"stretch panelwrapper\"></div>');\r\n\r\n    panel.settings = settings = settings || {};\r\n    panel.id = panel.name = name;\r\n    $panel = $('.panel.' + name);\r\n    $panel.data('name', name);\r\n    panel.$el = $panel.detach();\r\n    panel.$el.appendTo($panelwrapper);\r\n    $panelwrapper.appendTo($source);\r\n    panel.$panel = panel.$el;\r\n    panel.$el = panel.$el.parent().hide();\r\n    panel.el = document.getElementById(name);\r\n    panel.order = ++Panel.order;\r\n\r\n    panel.label = (settings.label || name);\r\n\r\n    panel.$el.data('panel', panel);\r\n\r\n    this._eventHandlers = {};\r\n\r\n    panel.on('show', panels.updateQuery);\r\n    panel.on('hide', panels.updateQuery);\r\n\r\n    // keyboard shortcut (set in keyboardcontrol.js)\r\n    panelShortcuts[panelShortcuts.start + panel.order] = panel.id;\r\n\r\n    if (panel.order === 1) {\r\n      settings.nosplitter = true;\r\n    }\r\n\r\n    if (settings.editor) {\r\n      cmSettings = {\r\n        parserfile: [],\r\n        readOnly: jsbin.state.embed ? 'nocursor' : false,\r\n        dragDrop: false, // we handle it ourselves\r\n        mode: editorModes[panelLanguage],\r\n        lineWrapping: false,\r\n        // gutters: ['line-highlight'],\r\n        theme: jsbin.settings.theme || 'jsbin',\r\n        highlightLine: true\r\n      };\r\n\r\n      $.extend(cmSettings, jsbin.settings.editor || {});\r\n\r\n      cmSettings.extraKeys = {};\r\n\r\n      // only the js panel for now, I'd like this to work in\r\n      // the HTML panel too, but only when you were in JS scope\r\n      if (name === 'javascript') {\r\n        cmSettings.extraKeys.Tab = 'autocomplete';\r\n      } else {\r\n        cmSettings.extraKeys.Tab = 'snippets';\r\n      }\r\n\r\n\r\n      if (name === 'html') {\r\n        // some emmet \"stuff\" - TODO decide whether this is needed still...\r\n        $.extend(cmSettings, {\r\n          syntax: name, // define Zen Coding syntax\r\n          profile: name, // define Zen Coding output profile\r\n        });\r\n      }\r\n\r\n      // make sure tabSize and indentUnit are numbers\r\n      if (typeof cmSettings.tabSize === 'string') {\r\n        cmSettings.tabSize = parseInt(cmSettings.tabSize, 10) || 2;\r\n      }\r\n      if (typeof cmSettings.indentUnit === 'string') {\r\n        cmSettings.indentUnit = parseInt(cmSettings.indentUnit, 10) || 2;\r\n      }\r\n\r\n      panel.editor = CodeMirror.fromTextArea(panel.el, cmSettings);\r\n\r\n      if (name === 'html' || name === 'css') {\r\n        delete emmetCodeMirror.defaultKeymap['Cmd-D'];\r\n        delete emmetCodeMirror.defaultKeymap['Ctrl-D'];\r\n        emmetCodeMirror(panel.editor);\r\n      }\r\n\r\n      panel.editor.on('highlightLines', function () {\r\n        window.location.hash = panels.getHighlightLines();\r\n      });\r\n\r\n      // Bind events using CM3 syntax\r\n      panel.editor.on('change', function codeChange(cm, changeObj) {\r\n        if (jsbin.saveDisabled) {\r\n          $document.trigger('codeChange.live', [{ panelId: panel.id, revert: true, origin: changeObj.origin }]);\r\n        } else {\r\n          $document.trigger('codeChange', [{ panelId: panel.id, revert: true, origin: changeObj.origin }]);\r\n        }\r\n        return true;\r\n      });\r\n\r\n      panel.editor.on('focus', function () {\r\n        panel.focus();\r\n      });\r\n\r\n      // Restore keymaps taken by emmet but that we need for other functionalities\r\n      if (name === 'javascript') {\r\n        var cmd = $.browser.platform === 'mac' ? 'Cmd' : 'Ctrl';\r\n        var map = {};\r\n        map[cmd + '-D'] = 'deleteLine';\r\n        map[cmd + '-/'] = function(cm) { CodeMirror.commands.toggleComment(cm); };\r\n        map.name = 'noEmmet';\r\n        panel.editor.addKeyMap(map);\r\n      }\r\n\r\n      panel._setupEditor(panel.editor, name);\r\n    }\r\n\r\n    if ($('html').is('.layout')) {\r\n      panel.splitter = $();\r\n      panel.$el.removeClass('stretch');\r\n    } else if (!settings.nosplitter) {\r\n      panel.splitter = panel.$el.splitter(splitterSettings).data('splitter');\r\n      panel.splitter.hide();\r\n    } else {\r\n      // create a fake splitter to let the rest of the code work\r\n      panel.splitter = $();\r\n    }\r\n\r\n    if (jsbin.state.processors && jsbin.state.processors[name]) {\r\n      panelLanguage = jsbin.state.processors[name];\r\n      jsbin.processors.set(panel, jsbin.state.processors[name]);\r\n    } else if (settings.processor) { // FIXME is this even used?\r\n      panelLanguage = settings.processors[settings.processor];\r\n      jsbin.processors.set(panel, settings.processor);\r\n    } else if (processors[panel.id]) {\r\n      jsbin.processors.set(panel, panel.id);\r\n    } else {\r\n      // this is just a dummy function for console & output...which makes no sense...\r\n      panel.processor = function (str) {\r\n        return new Promise(function (resolve) {\r\n          resolve(str);\r\n        });\r\n      };\r\n\r\n    }\r\n\r\n    if (settings.beforeRender) {\r\n      $document.bind('render', $.proxy(settings.beforeRender, panel));\r\n    }\r\n\r\n    if (!settings.editor) {\r\n      panel.ready = true;\r\n    }\r\n\r\n    // append panel to controls\r\n    if (jsbin.state.embed) {\r\n      // showPanelButton = window.location.search.indexOf(panel.id) !== -1;\r\n    }\r\n\r\n    if (showPanelButton) {\r\n      this.controlButton = $('<a role=\"button\" class=\"button group\" href=\"?' + name + '\">' + panel.label + '</a>');\r\n      this.updateAriaState();\r\n\r\n      this.controlButton.on('click touchstart', function () {\r\n        panel.toggle();\r\n        return false;\r\n      });\r\n      this.controlButton.appendTo('#panels');\r\n    }\r\n\r\n    $panel.focus(function () {\r\n      panel.focus();\r\n    });\r\n    if (!jsbin.mobile) {\r\n      $panel.add(this.$el.find('.label')).click(function () {\r\n        panel.focus();\r\n      });\r\n    }\r\n  };\r\n\r\n  Panel.order = 0;\r\n\r\n  Panel.prototype = {\r\n    virgin: true,\r\n    visible: false,\r\n    updateAriaState: function updateAriaState() {\r\n      this.controlButton.attr('aria-label', this.label + ' Panel: ' + (this.visible ? 'Active' : 'Inactive'));\r\n    },\r\n    show: function show(x) {\r\n      hideOpen();\r\n      if (this.visible) {\r\n        return;\r\n      }\r\n      $document.trigger('history:close');\r\n      // check to see if there's a panel to the left.\r\n      // if there is, take it's size/2 and make this our\r\n      // width\r\n      var panel = this,\r\n          panelCount = panel.$el.find('.panel').length;\r\n\r\n      analytics.showPanel(panel.id);\r\n\r\n      if (jsbin.mobile) {\r\n        panels.hideAll(true);\r\n      }\r\n\r\n      if (panel.splitter.length) {\r\n        if (panelCount === 0 || panelCount > 1) {\r\n          var $panel = $('.panel.' + panel.id).show();\r\n          // $panel.next().show(); // should be the splitter...\r\n          $panel.closest('.panelwrapper').show();\r\n        } else {\r\n          panel.$el.show();\r\n        }\r\n        panel.splitter.show();\r\n      } else {\r\n        panel.$el.show();\r\n      }\r\n\r\n      $body.addClass('panelsVisible');\r\n\r\n      if (panel.settings.show) {\r\n        panel.settings.show.call(panel, true);\r\n      }\r\n      panel.controlButton.addClass('active');\r\n      panel.visible = true;\r\n      this.updateAriaState();\r\n\r\n\r\n      // if the textarea is in focus AND we're mobile AND the keyboard is up\r\n      if (jsbin.mobile && window.matchMedia && window.matchMedia('(max-height: 410px) and (max-width: 640px)').matches) {\r\n        if (panel.editor) panel.editor.focus();\r\n      }\r\n\r\n      if (jsbin.mobile) {\r\n        panel.focus();\r\n        panel.trigger('show');\r\n        return;\r\n      }\r\n\r\n      // update the splitter - but do it on the next tick\r\n      // required to allow the splitter to see it's visible first\r\n      setTimeout(function () {\r\n        if (userResizeable) {\r\n          if (x !== undefined) {\r\n            panel.splitter.trigger('init', x);\r\n          } else {\r\n            panel.distribute();\r\n          }\r\n        }\r\n        if (panel.editor) {\r\n          // populate the panel for the first time\r\n          if (panel.virgin) {\r\n            var top = panel.$el.find('.label').outerHeight();\r\n            top += 8;\r\n\r\n            if (!jsbin.mobile) {\r\n              $(panel.editor.scroller).find('.CodeMirror-lines').css('padding-top', top);\r\n            }\r\n\r\n            populateEditor(panel, panel.name);\r\n          }\r\n          if (!panel.virgin || jsbin.panels.ready) {\r\n            panel.editor.focus();\r\n            panel.focus();\r\n          }\r\n          if (panel.virgin) {\r\n            if (panel.settings.init) {\r\n              setTimeout(function () {\r\n                panel.settings.init.call(panel);\r\n              }, 10);\r\n            }\r\n          }\r\n        } else {\r\n          panel.focus();\r\n        }\r\n        // update all splitter positions\r\n        $document.trigger('sizeeditors');\r\n\r\n        panel.trigger('show');\r\n\r\n        panel.virgin = false;\r\n      }, 0);\r\n\r\n      // TODO save which panels are visible in their profile - but check whether it's their code\r\n    },\r\n    hide: function (fromShow) {\r\n      var panel = this;\r\n      // panel.$el.hide();\r\n      panel.visible = false;\r\n      this.updateAriaState();\r\n\r\n      if (!fromShow) {\r\n        analytics.hidePanel(panel.id);\r\n      } else if (panel.editor) {\r\n        getRenderedCode[panel.id] = getRenderedCode.render(panel.id);\r\n      }\r\n\r\n      // update all splitter positions\r\n      // LOGIC: when you go to hide, you need to check if there's\r\n      // other panels inside the panel wrapper - if there are\r\n      // hide the nested panel and any previous visible splitter\r\n      // if there's only one - then hide the whole thing.\r\n      // if (panel.splitter.length) {\r\n      var panelCount = panel.$el.find('.panel').length;\r\n      if (panelCount === 0 || panelCount > 1) {\r\n        var $panel = $('.panel.' + panel.id).hide();\r\n        $panel.prev().hide(); // hide the splitter if there is one\r\n\r\n        // TODO trigger a distribute horizontally\r\n        if ($panel.closest('.panelwrapper').find('.panel:visible').length === 0) {\r\n          $panel.closest('.panelwrapper').hide();\r\n          // panel.splitter.hide();\r\n          // TODO FIXME\r\n        }\r\n      } else {\r\n        panel.$el.hide();\r\n        panel.splitter.hide();\r\n      }\r\n\r\n\r\n      if (panel.editor) {\r\n        panel.controlButton.toggleClass('hasContent', !!this.getCode().trim().length);\r\n      }\r\n\r\n      panel.controlButton.removeClass('active');\r\n\r\n      if (panel.settings.hide) {\r\n        panel.settings.hide.call(panel, true);\r\n      }\r\n\r\n      var visible = jsbin.panels.getVisible();\r\n      if (visible.length) {\r\n        jsbin.panels.focused = visible[0];\r\n        if (jsbin.panels.focused.editor) {\r\n          jsbin.panels.focused.editor.focus();\r\n        } else {\r\n          jsbin.panels.focused.$el.focus();\r\n        }\r\n        jsbin.panels.focused.focus();\r\n      }\r\n\r\n      if (!fromShow && jsbin.mobile && visible.length === 0) {\r\n        $document.trigger('history:load');\r\n        $('#history').show();\r\n        setTimeout(function () {\r\n          $body.removeClass('panelsVisible');\r\n        }, 100); // 100 is on purpose to add to the effect of the reveal\r\n      }\r\n\r\n      panel.trigger('hide');\r\n\r\n      if (fromShow) {\r\n        return;\r\n      }\r\n\r\n      panel.distribute();\r\n      $document.trigger('sizeeditors');\r\n\r\n      // note: the history:open does first check whether there's an open panels\r\n      // and if there are, it won't show the history, it'll just ignore the event\r\n      $document.trigger('history:open');\r\n    },\r\n    toggle: function () {\r\n      (this)[this.visible ? 'hide' : 'show']();\r\n    },\r\n    getCode: function () {\r\n      if (this.editor) {\r\n        badChars.lastIndex = 0;\r\n        return this.editor.getCode().replace(badChars, '');\r\n      }\r\n    },\r\n    setCode: function (content) {\r\n      if (this.editor) {\r\n        if (content === undefined) {\r\n          content = '';\r\n        }\r\n        this.controlButton.toggleClass('hasContent', !!content.trim().length);\r\n        this.codeSet = true;\r\n        this.editor.setCode(content.replace(badChars, ''));\r\n      }\r\n    },\r\n    codeSet: false,\r\n    blur: function () {\r\n      this.$panel.addClass('blur');\r\n    },\r\n    focus: function () {\r\n      this.$panel.removeClass('blur');\r\n      jsbin.panels.focus(this);\r\n    },\r\n    render: function () {\r\n      'use strict';\r\n      var args = [].slice.call(arguments);\r\n      var panel = this;\r\n      return new Promise(function (resolve, reject) {\r\n        if (panel.editor) {\r\n          panel.processor(panel.getCode()).then(resolve, reject);\r\n        } else if (panel.visible && panel.settings.render) {\r\n          if (jsbin.panels.ready) {\r\n            panel.settings.render.apply(panel, args);\r\n          }\r\n          resolve();\r\n        }\r\n      });\r\n    },\r\n    init: function () {\r\n      if (this.settings.init) this.settings.init.call(this);\r\n    },\r\n    _setupEditor: function () {\r\n      var focusedPanel = store.sessionStorage.getItem('panel') || jsbin.settings.focusedPanel,\r\n          panel = this,\r\n          editor = panel.editor;\r\n\r\n      // overhang from CodeMirror1\r\n      editor.setCode = function (str) {\r\n        //Cannot call method 'chunkSize' of undefined\r\n        try {\r\n          editor.setValue(str);\r\n        } catch(err) {\r\n          // console.error(panel.id, err);\r\n        }\r\n      };\r\n\r\n\r\n      editor.getCode = function () {\r\n        return editor.getValue();\r\n      };\r\n\r\n      editor.currentLine = function () {\r\n        var pos = editor.getCursor();\r\n        return pos.line;\r\n      };\r\n\r\n      // editor.setOption('onKeyEvent', keycontrol);\r\n      // editor.setOption('onFocus', function () {\r\n        // panel.$el.trigger('focus');\r\n      // });\r\n\r\n      // This prevents the browser from jumping\r\n      if (jsbin.embed) {\r\n        editor._focus = editor.focus;\r\n        editor.focus = function () {\r\n          // console.log('ignoring manual call');\r\n        };\r\n      }\r\n\r\n      editor.id = panel.name;\r\n\r\n      editor.win = editor.getWrapperElement();\r\n      editor.scroller = $(editor.getScrollerElement());\r\n\r\n      var $label = panel.$el.find('.label');\r\n      if (document.body.className.indexOf('ie6') === -1 && $label.length) {\r\n        editor.on('scroll', function (event) {\r\n          var scrollInfo = editor.getScrollInfo();\r\n          if (scrollInfo.top > 10) {\r\n            $label.stop().animate({ opacity: 0 }, 20, function () {\r\n              $(this).hide();\r\n            });\r\n          } else {\r\n            $label.show().stop().animate({ opacity: 1 }, 150);\r\n          }\r\n        });\r\n      }\r\n\r\n      var $error = null;\r\n      $document.bind('sizeeditors', function () {\r\n        if (panel.visible) {\r\n          var height = panel.editor.scroller.closest('.panel').outerHeight();\r\n          var offset = 0;\r\n          $error = panel.$el.find('details');\r\n          offset += ($error.filter(':visible').height() || 0);\r\n\r\n          if (!jsbin.lameEditor) {\r\n            editor.scroller.height(height - offset);\r\n          }\r\n          try { editor.refresh(); } catch (e) {}\r\n\r\n          setTimeout(function () {\r\n            $source[0].style.paddingLeft = '1px';\r\n            setTimeout(function () {\r\n              $source[0].style.paddingLeft = '0';\r\n            }, 0);\r\n          }, 0);\r\n        }\r\n      });\r\n\r\n      // required because the populate looks at the height, and at\r\n      // this point in the code, the editor isn't visible, the browser\r\n      // needs one more tick and it'll be there.\r\n      setTimeout(function () {\r\n        // if the panel isn't visible this only has the effect of putting\r\n        // the code in the textarea (though probably costs us a lot more)\r\n        // it has to be re-populated upon show for the first time because\r\n        // it appears that CM2 uses the visible height to work out what\r\n        // should be shown.\r\n        panel.ready = true;\r\n        populateEditor(panel, panel.name);\r\n\r\n        if (focusedPanel == panel.name) {\r\n          // another fracking timeout to avoid conflict with other panels firing up\r\n          setTimeout(function () {\r\n            panel.focus();\r\n            if (panel.visible && !jsbin.mobile && !jsbin.tablet) {\r\n              editor.focus();\r\n\r\n              var code = editor.getCode().split('\\n'),\r\n                  blank = null,\r\n                  i = 0;\r\n\r\n              for (; i < code.length; i++) {\r\n                if (blank === null && code[i].trim() === '') {\r\n                  blank = i;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              editor.setCursor({ line: (store.sessionStorage.getItem('line') || blank || 0) * 1, ch: (store.sessionStorage.getItem('character') || 0) * 1 });\r\n            }\r\n          }, 110); // This is totally arbitrary\r\n        }\r\n      }, 0);\r\n    },\r\n    populateEditor: function () {\r\n      populateEditor(this, this.name);\r\n    },\r\n\r\n    // events\r\n    on: function (event, fn) {\r\n      (this._eventHandlers[event] = this._eventHandlers[event] || []).push(fn);\r\n      return this;\r\n    },\r\n\r\n    trigger: function (event) {\r\n      var args = [].slice.call(arguments, 1);\r\n      args.unshift({ type: event });\r\n      for (var list = this._eventHandlers[event], i = 0; list && list[i];) {\r\n        list[i++].apply(this, args);\r\n      }\r\n      return this;\r\n    }\r\n  };\r\n\r\n  function populateEditor(editor, panel) {\r\n    if (!editor.codeSet) {\r\n      // populate - should eventually use: session, saved data, local storage\r\n      var cached = store.sessionStorage.getItem('jsbin.content.' + panel), // session code\r\n          saved = jsbin.embed ? null : store.localStorage.getItem('saved-' + panel), // user template\r\n          sessionURL = store.sessionStorage.getItem('url'),\r\n          changed = false;\r\n\r\n      // if we clone the bin, there will be a checksum on the state object\r\n      // which means we happily have write access to the bin\r\n      if (sessionURL !== jsbin.getURL() && !jsbin.state.checksum) {\r\n        // nuke the live saving checksum\r\n        store.sessionStorage.removeItem('checksum');\r\n        saveChecksum = false;\r\n      }\r\n\r\n      if (template && cached == template[panel]) { // restored from original saved\r\n        editor.setCode(cached);\r\n      } else if (cached && sessionURL == jsbin.getURL() && sessionURL !== jsbin.root) { // try to restore the session first - only if it matches this url\r\n        editor.setCode(cached);\r\n        // tell the document that it's currently being edited, but check that it doesn't match the saved template\r\n        // because sessionStorage gets set on a reload\r\n        changed = cached != saved && cached != template[panel];\r\n      } else if (!template.post && saved !== null && !/(edit|embed)$/.test(window.location) && !window.location.search) { // then their saved preference\r\n        editor.setCode(saved);\r\n        var processor = JSON.parse(store.localStorage.getItem('saved-processors') || '{}')[panel];\r\n        if (processor) {\r\n          jsbin.processors.set(jsbin.panels.panels[panel], processor);\r\n        }\r\n      } else { // otherwise fall back on the JS Bin default\r\n        editor.setCode(template[panel]);\r\n      }\r\n\r\n      if (editor.editor && editor.editor.clearHistory) {\r\n        editor.editor.clearHistory();\r\n      }\r\n\r\n    } else {\r\n      // this means it was set via the url\r\n      changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n      $document.trigger('codeChange', [ { revert: false, onload: true } ]);\r\n    }\r\n  }\r\n\r\n  return coder.editors.Panel = Panel;\r\n});"]}